#!/bin/bash

# Script to configure the TypeScript test variables and accounts for each environment
# Usage: ./scripts/test_setup.sh <environment> (e.g., devnet, testnet, mainnet)

set -e

ENV=$1
BASE_DIR=$(dirname "$0")
ROOT_DIR=$(cd "$BASE_DIR" && cd .. && pwd)
ENV_FILE="$ROOT_DIR/.env/$ENV.env"
KEYS_DIR="./.deploy-keys"
DEPLOY_KEYPAIR_FILE="$KEYS_DIR/soccial_token-${ENV}-keypair.json"
OUTPUT_DIR="$ROOT_DIR/test_config"
CONFIG_TS="$OUTPUT_DIR/$ENV.config.ts"
TEST_ACCOUNTS_FILE="$OUTPUT_DIR/$ENV.accounts.json"

# Ensure output directory exists
mkdir -p "$OUTPUT_DIR"

# Validate environment input
if [[ -z "$ENV" ]]; then
  echo "‚ùå Usage: ./scripts/test_setup.sh <environment>"
  exit 1
fi

# Check for .env file
if [[ ! -f "$ENV_FILE" ]]; then
  echo "‚ùå Environment file not found: $ENV_FILE"
  exit 1
fi

# Check for deployment keypair
if [[ ! -f "$DEPLOY_KEYPAIR_FILE" ]]; then
  echo "‚ùå Deployment keypair not found: $DEPLOY_KEYPAIR_FILE . It will be created before the deploy: Yarn deploy $ENV"
  exit 1
fi

# Load environment variables
source "$ENV_FILE"

# Validate required variables
if [[ -z "$ANCHOR_PROVIDER_URL" ]]; then
  echo "‚ùå ANCHOR_PROVIDER_URL is not defined in $ENV_FILE"
  exit 1
fi

if [[ -z "$ANCHOR_WALLET" ]]; then
  echo "‚ùå ANCHOR_WALLET is not defined in $ENV_FILE"
  exit 1
fi

AUTHORITY_KEYPAIR="$ANCHOR_WALLET"

if [[ -z "$TEAM1" || -z "$TEAM2" ]]; then
  echo "‚ùå TEAM1 and TEAM2 must be defined in $ENV_FILE"
  exit 1
fi

# Get PROGRAM_ID and AUTHORITY_PUBLIC_KEY
PROGRAM_ID=$(solana address -k "$DEPLOY_KEYPAIR_FILE")
AUTHORITY_PUBKEY=$(solana address -k "$AUTHORITY_KEYPAIR")

# Create test accounts if not already created (but skip if mainnet)
if [[ "$ENV" == "mainnet" ]]; then
  echo "‚ö†Ô∏è  Skipping test account generation in mainnet environment."
elif [[ ! -f "$TEST_ACCOUNTS_FILE" ]]; then
  echo "üîß Creating test accounts..."

  node <<EOF
import fs from 'fs';
import { Keypair } from '@solana/web3.js';

const accountA = Keypair.generate();
const accountB = Keypair.generate();

const output = {
  accountA: {
    publicKey: accountA.publicKey.toBase58(),
    secretKey: Array.from(accountA.secretKey),
  },
  accountB: {
    publicKey: accountB.publicKey.toBase58(),
    secretKey: Array.from(accountB.secretKey),
  },
};

fs.writeFileSync("$TEST_ACCOUNTS_FILE", JSON.stringify(output, null, 2));
console.log("‚úÖ Test accounts generated.");
EOF
else
  echo "‚úÖ Test accounts already exist: $TEST_ACCOUNTS_FILE"
fi


# Generate .ts config file
echo "üì¶ Generating config file: $CONFIG_TS"

cat <<EOF > "$CONFIG_TS"
// Auto-generated by configure_setup.sh
import { PublicKey, Keypair, Connection } from "@solana/web3.js";
import fs from "fs";

export const TEAM1_PUBLIC_KEY = new PublicKey("$TEAM1");
export const TEAM2_PUBLIC_KEY = new PublicKey("$TEAM2");
export const ENVIRONMENT = "$ENV";
export const RPC_URL = "$ANCHOR_PROVIDER_URL";
export const connection = new Connection(RPC_URL, "confirmed");

export const AUTHORITY_KEYPAIR_PATH = "$AUTHORITY_KEYPAIR";
export const AUTHORITY_PUBLIC_KEY = new PublicKey("$AUTHORITY_PUBKEY");
export const PROGRAM_ID = new PublicKey("$PROGRAM_ID");

// Load test accounts (ESM compatible)
export const TEST_ACCOUNTS = JSON.parse(
  fs.readFileSync(new URL("./$ENV.accounts.json", import.meta.url), "utf-8")
);

export const getKeypairFromSecret = (secret: number[]): Keypair => {
  return Keypair.fromSecretKey(Uint8Array.from(secret));
};

export const getAuthorityKeypair = (): Keypair => {
  return Keypair.fromSecretKey(
    Uint8Array.from(JSON.parse(fs.readFileSync(AUTHORITY_KEYPAIR_PATH, "utf-8")))
  );
};
EOF

echo "‚úÖ Done. You can now run your typescript tests using this config: test_config/$ENV.config.ts"
