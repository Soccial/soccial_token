searchState.loadedDescShard("spl_pod", 0, "Crate containing <code>Pod</code> types and <code>bytemuck</code> utilities used in …\nwrappers for <code>bytemuck</code> functions\nError types\nSimple macro for implementing conversion functions between …\nGeneric <code>Option</code> that can be used as a <code>Pod</code> for types that …\nOptional pubkeys that can be used a <code>Pod</code>s\nprimitive types that can be used in <code>Pod</code>s\nSpecial types for working with slices of <code>Pod</code>s\nConvert a <code>Pod</code> into a slice of bytes (zero copy)\nConvert a slice of bytes into a <code>Pod</code> (zero copy)\nConvert a slice of bytes into a mutable <code>Pod</code> (zero copy)\nOn-chain size of a <code>Pod</code> type\nMaybe convert a slice of bytes into a <code>Pod</code> (zero copy)\nConvert a slice of bytes into a <code>Pod</code> slice (zero copy)\nConvert a slice of bytes into a mutable <code>Pod</code> slice (zero …\nConvert a <code>Pod</code> slice into a single slice of bytes\nProvided byte buffer too large for expected type\nProvided byte buffer too small for expected type\nError in checked math operation\nErrors that may be returned by the spl-pod library.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValue that represents <code>None</code> for the type.\nTrait for types that can be <code>None</code>.\nA “pod-enabled” type that can be used as an <code>Option&lt;T&gt;</code> …\nReturns the contained value as a mutable <code>Option</code>.\nReturns the contained value as an <code>Option</code>.\nReturns the argument unchanged.\nReturns the contained value as an <code>Option</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether the value is <code>None</code> or not.\nIndicates whether the value is <code>Some`` value of type </code>T`` or …\nAn <code>ElGamalPubkey</code> that encodes <code>None</code> as all <code>0</code>, meant to be …\nA Pubkey that encodes <code>None</code> as all <code>0</code>, meant to be usable as …\nChecks equality between an <code>OptionalNonZeroElGamalPubkey</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe standard <code>bool</code> is not a <code>Pod</code>, define a replacement that …\n<code>i16</code> type that can be used in Pods\n<code>i64</code> type that can be used in Pods\n<code>u128</code> type that can be used in Pods\n<code>u16</code> type that can be used in <code>Pod</code>s\n<code>u32</code> type that can be used in <code>Pod</code>s\n<code>u64</code> type that can be used in Pods\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecial type for using a slice of <code>Pod</code>s in a zero-copy way\nSpecial type for using a slice of mutable <code>Pod</code>s in a …\nGet the slice data\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnpack the mutable buffer into a mutable slice, and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd another item to the slice\nGet the amount of bytes used by <code>num_items</code>\nUnpack the buffer into a slice\nUnpack the mutable buffer into a mutable slice")