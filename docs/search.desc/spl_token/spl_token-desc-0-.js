searchState.loadedDescShard("spl_token", 0, "An ERC20-like Token program for the Solana blockchain\nThe const program ID.\nConvert a raw amount to its UI representation (using the …\nConvert a raw amount to its UI representation (using the …\nConvert a raw amount to its UI representation using the …\nReturns <code>true</code> if given pubkey is the program ID.\nChecks that the supplied program ID is the correct one for …\nError types\nReturns the program ID.\nInstruction types\nThe Mint that represents the native token\nProgram state processor\nExport current sdk types for downstream users building …\nState transition types\nTry to convert a UI representation of a token amount to …\nConvert the UI representation of a token amount (using the …\nAccount is frozen; all account operations will fail\nThe account cannot be initialized because it is already …\nAccount does not support specified authority type.\nThis token’s supply is fixed and new tokens cannot be …\nInsufficient funds for the operation requested.\nInvalid instruction\nInvalid Mint.\nInvalid number of provided signers.\nInvalid number of required signers.\nState is invalid for requested operation.\nThis token mint cannot freeze accounts.\nMint decimals mismatch between the client and mint\nAccount not associated with this Mint.\nInstruction does not support native tokens\nNon-native account can only be closed if its balance is …\nInstruction does not support non-native tokens\nLamport balance below rent-exempt threshold.\nOperation overflowed\nOwner does not match.\nErrors that may be returned by the Token program.\nState is uninitialized.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOwner of a given token account\nConvert an Amount of tokens to a <code>UiAmount</code> string, using …\nApproves a delegate.  A delegate is given the authority …\nApproves a delegate.  A delegate is given the authority …\nSpecifies the authority type for <code>SetAuthority</code> instructions\nBurns tokens by removing them from an account.  <code>Burn</code> does …\nBurns tokens by removing them from an account.  <code>BurnChecked</code>…\nClose an account by transferring all its SOL to the …\nAuthority to close a token account\nFreeze an Initialized account using the Mint’s …\nAuthority to freeze any account associated with the Mint\nGets the required size of an account for the given mint as …\nInitializes a new account to hold tokens.  If this account …\nLike [<code>InitializeAccount</code>], but the owner pubkey is passed …\nLike [<code>InitializeAccount2</code>], but does not require the Rent …\nInitialize the Immutable Owner extension for the given …\nInitializes a new mint and optionally deposits all the …\nLike [<code>InitializeMint</code>], but does not require the Rent …\nInitializes a multisignature account with N provided …\nLike [<code>InitializeMultisig</code>], but does not require the Rent …\nMaximum number of multisignature signers (max N)\nMinimum number of multisignature signers (min N)\nMints new tokens to an account.  The native mint does not …\nMints new tokens to an account.  The native mint does not …\nAuthority to mint new tokens\nRevokes the delegate’s authority.\nSets a new authority of a mint or account.\nGiven a wrapped / native token account (a token account …\nThaw a Frozen account using the Mint’s <code>freeze_authority</code> …\nInstructions supported by the token program.\nTransfers tokens from one account to another either …\nTransfers tokens from one account to another either …\nConvert a <code>UiAmount</code> of tokens to a little-endian <code>u64</code> raw …\nCreates an <code>AmountToUiAmount</code> instruction\nCreates an <code>Approve</code> instruction.\nCreates an <code>ApproveChecked</code> instruction.\nCreates a <code>Burn</code> instruction.\nCreates a <code>BurnChecked</code> instruction.\nCreates a <code>CloseAccount</code> instruction.\nCreates a <code>FreezeAccount</code> instruction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>GetAccountDataSize</code> instruction\nCreates a <code>InitializeAccount</code> instruction.\nCreates a <code>InitializeAccount2</code> instruction.\nCreates a <code>InitializeAccount3</code> instruction.\nCreates a <code>InitializeImmutableOwner</code> instruction\nCreates a <code>InitializeMint</code> instruction.\nCreates a <code>InitializeMint2</code> instruction.\nCreates a <code>InitializeMultisig</code> instruction.\nCreates a <code>InitializeMultisig2</code> instruction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUtility function that checks index is between <code>MIN_SIGNERS</code> …\nCreates a <code>MintTo</code> instruction.\nCreates a <code>MintToChecked</code> instruction.\nPacks a <code>TokenInstruction</code> into a byte buffer.\nCreates a <code>Revoke</code> instruction.\nCreates a <code>SetAuthority</code> instruction.\nCreates a <code>SyncNative</code> instruction\nCreates a <code>ThawAccount</code> instruction.\nCreates a <code>Transfer</code> instruction.\nCreates a <code>TransferChecked</code> instruction.\nCreates a <code>UiAmountToAmount</code> instruction\nUnpacks a byte buffer into a <code>TokenInstruction</code>.\nThe amount of tokens to transfer.\nThe amount of tokens the delegate is approved for.\nThe amount of new tokens to mint.\nThe amount of tokens to burn.\nThe amount of tokens to transfer.\nThe amount of tokens the delegate is approved for.\nThe amount of new tokens to mint.\nThe amount of tokens to burn.\nThe amount of tokens to reformat.\nThe type of authority to update.\nNumber of base 10 digits to the right of the decimal place.\nExpected number of base 10 digits to the right of the …\nExpected number of base 10 digits to the right of the …\nExpected number of base 10 digits to the right of the …\nExpected number of base 10 digits to the right of the …\nNumber of base 10 digits to the right of the decimal place.\nThe freeze authority/multisignature of the mint.\nThe freeze authority/multisignature of the mint.\nThe number of signers (M) required to validate this …\nThe number of signers (M) required to validate this …\nThe authority/multisignature to mint tokens.\nThe authority/multisignature to mint tokens.\nThe new authority\nThe new account’s owner/multisignature.\nThe new account’s owner/multisignature.\nThe <code>ui_amount</code> of tokens to reformat.\nThere are <code>10^9</code> lamports in one SOL\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.\nProgram state handler.\nChecks that the account is owned by the expected program\nChecks two pubkeys for equality in a computationally cheap …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProcesses an <code>Instruction</code>.\nProcesses an <code>AmountToUiAmount</code> instruction\nProcesses an <code>Approve</code> instruction.\nProcesses a <code>Burn</code> instruction.\nProcesses a <code>CloseAccount</code> instruction.\nProcesses a <code>GetAccountDataSize</code> instruction\nProcesses an <code>InitializeAccount</code> instruction.\nProcesses an <code>InitializeAccount2</code> instruction.\nProcesses an <code>InitializeAccount3</code> instruction.\nProcesses an <code>InitializeImmutableOwner</code> instruction\nProcesses an <code>InitializeMint</code> instruction.\nProcesses an <code>InitializeMint2</code> instruction.\nProcesses a <code>InitializeMultisig</code> instruction.\nProcesses a <code>InitializeMultisig2</code> instruction.\nProcesses a <code>MintTo</code> instruction.\nProcesses an <code>Revoke</code> instruction.\nProcesses a <code>SetAuthority</code> instruction.\nProcesses a <code>SyncNative</code> instruction\nProcesses a <code>FreezeAccount</code> or a <code>ThawAccount</code> instruction.\nProcesses a <code>Transfer</code> instruction.\nProcesses an <code>AmountToUiAmount</code> instruction\nValidates owner(s) are present\nContains the error value\nContains the success value\nDescribes a single account read or written by a program …\nA directive for a single invocation of a Solana program.\nMetadata describing accounts that should be passed to the …\nOpaque data passed to the program for its own …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if an <code>Instruction</code> requires a <code>Transaction</code> signature …\nTrue if the account data or metadata may be mutated during …\nConstruct metadata for a writable account.\nConstruct metadata for a read-only account.\nCreate a new instruction from a value, encoded with <code>bincode</code>…\nCreate a new instruction from a value, encoded with <code>borsh</code>.\nCreate a new instruction from a byte slice.\nPubkey of the program that executes this instruction.\nAn account’s public key.\nAllows on-chain programs to implement program-specific …\nReasons the program may fail\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA C representation of Rust’s <code>std::option::Option</code>\nNo value\nSome value <code>T</code>\nReturns <code>COption::None</code> if the option is <code>COption::None</code>, …\nReturns <code>COption::None</code> if the option is <code>COption::None</code>, …\nConverts from <code>COption&lt;T&gt;</code> (or <code>&amp;COption&lt;T&gt;</code>) to …\nConverts from <code>COption&lt;T&gt;</code> (or <code>&amp;mut COption&lt;T&gt;</code>) to …\nConverts from <code>&amp;mut COption&lt;T&gt;</code> to <code>COption&lt;&amp;mut T&gt;</code>.\nConverts from <code>&amp;COption&lt;T&gt;</code> to <code>COption&lt;&amp;T&gt;</code>.\nMaps an <code>COption&lt;&amp;mut T&gt;</code> to an <code>COption&lt;T&gt;</code> by cloning the …\nMaps an <code>COption&lt;&amp;T&gt;</code> to an <code>COption&lt;T&gt;</code> by cloning the …\nReturns <code>true</code> if the option is a <code>COption::Some</code> value …\nMaps an <code>COption&lt;&amp;T&gt;</code> to an <code>COption&lt;T&gt;</code> by copying the …\nMaps an <code>COption&lt;&amp;mut T&gt;</code> to an <code>COption&lt;T&gt;</code> by copying the …\nReturns <code>COption::None</code>\nUnwraps an option, yielding the content of a <code>COption::Some</code>.\nReturns <code>COption::None</code> if the option is <code>COption::None</code>, …\nConverts from <code>COption&lt;COption&lt;T&gt;&gt;</code> to <code>COption&lt;T&gt;</code>\nReturns the argument unchanged.\nInserts <code>v</code> into the option if it is <code>COption::None</code>, then …\nInserts a value computed from <code>f</code> into the option if it is …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the option is a <code>COption::None</code> value.\nReturns <code>true</code> if the option is a <code>COption::Some</code> value.\nMaps an <code>COption&lt;T&gt;</code> to <code>COption&lt;U&gt;</code> by applying a function to …\nApplies a function to the contained value (if any), or …\nApplies a function to the contained value (if any), or …\nTransforms the <code>COption&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …\nTransforms the <code>COption&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …\nReturns the option if it contains a value, otherwise …\nReturns the option if it contains a value, otherwise calls …\nReplaces the actual value in the option by the value given …\nTransposes an <code>COption</code> of a <code>Result</code> into a <code>Result</code> of an …\nMoves the value <code>v</code> out of the <code>COption&lt;T&gt;</code> if it is …\nReturns the contained value or a default.\nReturns the contained value or a default\nReturns the contained value or computes it from a closure.\nReturns <code>COption::Some</code> if exactly one of <code>self</code>, <code>optb</code> is …\nCheck if a program account state is initialized\nThe length, in bytes, of the packed representation\nSafely and efficiently (de)serialize account state\nImplementors must have a known size\nGet the packed length\nIs initialized\nPack into slice\nUnpack from slice and check if initialized\nUnpack from slice without checking if initialized\nNumber of bytes in a pubkey\nThe address of a Solana account.\nReturn a reference to the <code>Pubkey</code>’s byte array.\nCreate a valid program derived address without searching …\nFind a valid program derived address and its corresponding …\nReturns the argument unchanged.\nDecode a string into a Pubkey, usable in a const context\nCalls <code>U::from(self)</code>.\nLog a <code>Pubkey</code> from a program\nunique Pubkey for tests and benchmarks.\nFind a valid program derived address and its corresponding …\nThe offset of state field in Account’s C representation\nAccount data.\nAccount state.\nAccount has been frozen by the mint freeze authority. …\nA trait for token Account structs to enable efficiently …\nAccount is initialized; the account owner and/or delegate …\nMint data.\nMultisignature data.\nAccount is not yet initialized\nThe amount of tokens this account holds.\nOptional authority to close the account.\nNumber of base 10 digits to the right of the decimal place.\nIf <code>delegate</code> is <code>Some</code> then <code>delegated_amount</code> represents the …\nThe amount delegated\nOptional authority to freeze token accounts.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if account is frozen\nIs <code>true</code> if this structure has been initialized\nIs <code>true</code> if this structure has been initialized\nCheck if the account data buffer represents an initialized …\nChecks if account is native\nIf <code>is_native.is_some</code>, this is a native token, and the …\nChecks if a token Account’s owner is the <code>system_program</code> …\nNumber of signers required\nThe mint associated with this account\nOptional authority used to mint new tokens. The mint …\nNumber of valid signers\nThe owner of this account.\nSigner public keys\nThe account’s state\nTotal supply of tokens.\nUnpacks an account’s mint from opaque account data.\nCall after account length has already been verified to …\nUnpacks an account’s owner from opaque account data.\nCall after account length has already been verified to …\nCall after account length has already been verified to …\nCheck if the account data is a valid token account")