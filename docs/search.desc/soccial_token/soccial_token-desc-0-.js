searchState.loadedDescShard("soccial_token", 0, "Contains the error value\nThe static program ID\nConst version of <code>ID</code>\nContains the success value\nAn Anchor generated module, providing a set of structs …\nPerforms system-level checks to extract the user context …\nConfirms that a given pubkey is equivalent to the program …\nVerifies whether the given caller is the contract owner.\nThe Anchor codegen exposes a programming model where a …\nSafety\nReturns the argument unchanged.\nReturns the program ID\nConst version of <code>ID</code>\nAn Anchor generated module containing the program’s set …\nCalls <code>U::from(self)</code>.\nParses an argument from a <code>Vec&lt;String&gt;</code> safely, returning an …\nModule representing the program.\nEnsures that the provided <code>Vec&lt;String&gt;</code> has at least the …\nCombines check! and verify_permission! to perform a full …\nCombines <code>check!</code> and <code>verify_permission!</code> to perform a full …\nEnsures the caller is exactly the participant (resource …\nEnsures the caller is the target user, or has a specific …\nVerifies whether a given caller has the required …\nGenerated client accounts for <code>BuyAndStakeTokens</code>.\nGenerated client accounts for <code>BuyTokensContext</code>.\nGenerated client accounts for <code>ChangeUpdateAuthority</code>.\nGenerated client accounts for <code>ContractToVaultContext</code>.\nGenerated client accounts for <code>CreateProposal</code>.\nGenerated client accounts for <code>DepositTokensContext</code>.\nGenerated client accounts for <code>EditVestingSchedule</code>.\nGenerated client accounts for <code>EmitSystemLog</code>.\nGenerated client accounts for <code>FinalizeProposal</code>.\nGenerated client accounts for <code>ImmutableVestingSchedule</code>.\nGenerated client accounts for <code>InitializeEconomy</code>.\nGenerated client accounts for <code>InitializeFoundersVesting</code>.\nGenerated client accounts for <code>InitializeSplToken</code>.\nGenerated client accounts for <code>InitializeToken</code>.\nGenerated client accounts for <code>ManageAirdrop</code>.\nGenerated client accounts for <code>ManageContract</code>.\nGenerated client accounts for <code>ManageContractGovernance</code>.\nGenerated client accounts for <code>ManageGovernance</code>.\nGenerated client accounts for <code>ManageStaking</code>.\nGenerated client accounts for <code>ManageUser</code>.\nGenerated client accounts for <code>ManageUserRemove</code>.\nGenerated client accounts for <code>ManageVesting</code>.\nGenerated client accounts for <code>ReinforceStake</code>.\nGenerated client accounts for <code>ReleaseStaked</code>.\nGenerated client accounts for <code>ReleaseVestedTokens</code>.\nGenerated client accounts for <code>StakeTokens</code>.\nGenerated client accounts for <code>TransferTokensContext</code>.\nGenerated client accounts for <code>VaultDepositContext</code>.\nGenerated client accounts for <code>VaultTransferContext</code>.\nGenerated client accounts for <code>VaultWithdrawContext</code>.\nGenerated client accounts for <code>VoteOnProposal</code>.\nGenerated client accounts for <code>WithdrawStaked</code>.\nToken account holding tokens reserved for airdrops.\nAirdrop vault’s token account.\nToken account holding tokens reserved for airdrops.\nThe Airdrop Vault’s ATA holding the tokens to distribute.\nAssociated Token Program (used to validate token account …\nMust be owned by <code>mint_authority</code>. Validated manually.\nToken account owned by the buyer, receives purchased …\nThe caller managing a user (must be authorized).\nThe caller removing a user access entry (must be …\nThe caller that pays and signs for initialization.\nThe account initializing the economy setup.\nThe initializer of the SPL Token setup.\nThe initializer of the founders vesting schedules.\nThe caller performing contract-level operations.\nThe caller modifying contract settings via governance.\nThe caller emitting a system-level log message.\nThe signer initiating the instruction\nThe buyer executing the token purchase.\nThe caller initiating the deposit (must be authorized).\nThe caller initiating the transfer (must be authorized).\nThe user or admin triggering the vesting release.\nThe caller managing vesting schedules.\nThe caller performing the action (e.g. cancel, update).\nThe caller performing the action (e.g. cancel, update).\nThe caller performing the airdrop action (must be …\nThe user casting the vote.\nThe caller initiating the proposal creation.\nThe caller finalizing the proposal.\nThe caller managing governance settings (must be …\nThe user initiating the deposit (must be authorized).\nThe user initiating the withdrawal (must be authorized).\nThe user triggering the vault-to-vault transfer (must be …\nThe user triggering the contract-to-vault transfer.\nThe signer initiating the stake (usually the backend …\nThe caller initiating the staking (can be the user or an …\nThe caller initiating the staking (can be the user or an …\nThe caller releasing tokens (can be the user or admin).\nThe caller releasing tokens (can be the user or admin).\nThe admin or user managing the staking state.\nToken account receiving the tokens.\nUser’s token account to receive vested tokens.\nParticipant’s associated token account (optional use).\nAssociated token account for participant (may receive …\nDestination token account (might be used for future mints …\nDestination token account (might be used for future mints …\nThe destination ATA for the user receiving released tokens.\nThe destination ATA for the user receiving released tokens.\nDestination vault’s ATA that will receive the tokens.\nDestination vault’s ATA to receive tokens.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGovernance state account (quorum config, etc).\nGovernance state configuration.\nGovernance state config (tracks quorum, durations, …\nGovernance state config (holds quorum, durations, etc.).\nThe GovernanceState account holding all governance …\nGlobal governance configuration account.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nToken account holding tokens available for purchase.\nToken account owned by <code>liquidity_vault</code> holding source …\nToken account owned by liquidity_vault.\nToken account owned by the liquidity vault PDA.\nToken account owned by the liquidity vault PDA.\nToken account owned by the liquidity vault PDA.\nToken mint for the Soccial Token.\nThe SPL token mint (SCTK).\nThe token mint used for vesting allocations.\nToken mint used for vesting allocations.\nThe token mint of SCTK.\nThe token mint of SCTK.\nOffchain reserve vault’s token account.\nParticipant’s ATA holding SCTK tokens to deposit.\nParticipant’s token account (SCTK) – source of staked …\nParticipant’s token account (SCTK) – source of staked …\nGovernance proposal approval needed for the instruction.\nOptional proposal linked to this vault transfer.\nThe proposal being voted on.\nThe new proposal account to be created (PDA using last_id).\nThe proposal being finalized.\nSystem account to receive lamports when vesting account is …\nThe wallet that will receive remaining lamports when …\nToken account receiving the transferred tokens.\nThe recipient’s token account (destination of the …\nSysvar Rent\nToken account accumulating revenue from token sales or …\nRevenue vault’s token account.\nToken account holding tokens allocated for revenue …\nToken account holding tokens used for rewards distribution.\nRewards vault’s token account.\nToken account holding tokens designated for rewards.\nToken account of the sender (must match mint and …\nThe contract-owned source token account (fallback token …\nSource vault’s ATA holding the tokens to transfer.\nThe account that will store the staking metadata.\nThe account to store staking data for this specific stake.\nPDA storing stake metadata.\nGlobal staking configuration account.\nThe global staking state used to track all staking …\nThe global staking state used to track all staking …\nThe global staking state (config + counter).\nToken account owned by the staking vault PDA (receives …\nToken account owned by the staking vault PDA – receives …\nToken account owned by the staking vault PDA – receives …\nThe ATA of the staking vault holding staked tokens.\nThe ATA of the staking vault holding staked tokens.\nRequired for PDA creation and rent transfers.\nRequired for PDA manipulation and cleanup operations.\nSystem program for potential rent and PDA operations.\nSystem program for potential rent and PDA operations.\nSystem program for CPI\nSystem program required to create the proposal account.\nSystem program (in case of future dynamic logic).\nSystem program used for possible rent-exempt operations or …\nSystem program required for account creations.\nAccess control account for the target user (created if …\nAccess control account to be removed for the target user.\nPDA for the first founding team member’s vesting …\nPDA for the second founding team member’s vesting …\nToken mint (SCTK).\nMint of the SCTK token.\nSPL Token mint (SCTK).\nToken mint of SCTK.\nThe SCTK token mint.\nThe token mint of the Soccial Token (SCTK).\nThe token mint of the Soccial Token (SCTK).\nThe token mint of the Soccial Token (SCTK).\nToken program required for token transfers.\nSPL Token Program.\nSPL Token program.\nSPL Token Program.\nSPL Token Program.\nSPL Token Program.\nSPL Token Program.\nSPL Token Program.\nRequired SPL token program.\nGlobal token configuration state.\nGlobal token configuration state.\nGlobal token state tracking supply and ownership.\nGlobal token state tracking economics and status flags.\nToken state tracking supply and configuration.\nTokenState account managing the global configuration.\nTokenState account managing the global configuration.\nTokenState account for context verification.\nToken state account (used for current config if needed)\nTokenState account for system-wide configuration.\nGlobal token configuration and state.\nGlobal token configuration.\nGlobal token configuration state.\nGlobal token configuration.\nThe TokenState account, holding global token configuration …\nGlobal token state for economics (e.g. decimals).\nGlobal token state (may be used for constraints or …\nGlobal token state (may be used in quorum logic).\nGlobal token configuration (may be referenced for …\nGlobal TokenState configuration account.\nGlobal TokenState configuration account.\nGlobal TokenState configuration account.\nGlobal TokenState configuration account.\nGlobal token configuration and fee parameters.\nGlobal token configuration.\nGlobal token configuration.\nToken configuration and core settings.\nGlobal token configuration and settings.\nGlobal token configuration.\nOptional access control account for the caller.\nOptional access control account for the caller.\nOptional access control account for the caller.\nOptional access control account for the caller.\nOptional access control account for log authorization.\nOptional access control account for the caller.\nOptional user access control (validated if present).\nOptional access control account for the caller.\nAccess control metadata for the caller.\nOptional access control for the caller.\nOptional user access control account.\nOptional user access control account.\nUser access control (optional). Used for permission checks …\nOptional user access account, used to check staff and …\nOptional user access permissions (e.g., staff or early …\nOptional user access permissions (e.g., to restrict or …\nOptional user access permissions (to validate …\nOptional access control for participant permissions.\nOptional access control for withdrawal permission checks.\nOptional access control for transfer permission checks.\nOptional access control for permission checks.\nOptional access control for the caller (can be used to …\nOptional access control for caller.\nOptional access control for caller.\nAccess control data for the caller.\nAccess control data for the caller.\nAccess control for permission validation.\nAssociated Token Account (ATA) of the caller for SCTK.\nUser’s ATA to receive withdrawn tokens.\nVault’s ATA that will receive the deposited tokens.\nVault’s ATA holding tokens to be withdrawn.\nThe schedule tracking vesting amounts and timestamps.\nVesting schedule account for this participant and vesting …\nVesting schedule being modified.\nVesting schedule being validated or marked immutable.\nVesting state tracking the global vesting IDs and …\nGlobal vesting state to track ID counters and settings.\nToken account owned by <code>vesting_vault</code>, holding vested …\nToken account owned by <code>vesting_vault</code> to receive reserved …\nToken account owned by vesting_vault.\nVote receipt for this caller &amp; proposal (PDA created on …\n…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCHECK: The Airdrop Vault PDA. Must be manually verified in …\nThe Airdrop Vault’s ATA holding the tokens to distribute.\nThe caller performing the airdrop action (must be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCHECK: The Token Mint PDA. Must be manually verified in …\nThe recipient’s token account (destination of the …\nSPL Token Program.\nThe TokenState account, holding global token configuration …\nUser access control (optional). Used for permission checks …\nCustom errors for the Airdrop module\nThe requested airdrop amount exceeds the per-user limit …\nNot enough tokens available in the airdrop supply to …\nThe specified amount is zero or invalid.\nThe recipient’s associated token account is invalid or …\nArithmetic overflow occurred during airdrop calculations.\nThe airdrop vault does not have enough tokens to complete …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the name of this [#enum_name].\nThe caller managing a user (must be authorized).\nThe caller removing a user access entry (must be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequired for PDA creation and rent transfers.\nRequired for PDA manipulation and cleanup operations.\nCHECK: The target user public key; used for PDA derivation …\nCHECK: The target user public key; used for PDA derivation …\nAccess control account for the target user (created if …\nAccess control account to be removed for the target user.\nGlobal token configuration state.\nGlobal token configuration state.\nOptional access control account for the caller.\nOptional access control account for the caller.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the name of this [#enum_name].\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n========================== Enum: ExtraFlag\n========================== Account: UserAccessAccount\nAdds a specific ExtraFlag to the user’s access_bits.\nGrants a named permission to the user.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGrants administrative status to the user.\nReturns <code>true</code> if the specified ExtraFlag is currently set.\nReturns <code>true</code> if the user has the specified named …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemoves an ExtraFlag from the user’s access_bits.\nRevokes administrative status.\nRevokes a previously granted permission.\nEconomicsErrorCode defines custom errors related to …\nThe total of all defined fees (rewards + airdrop) exceeds …\nThe provided fee value is outside the allowed range (e.g., …\nAn arithmetic overflow occurred during internal fee …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the name of this [#enum_name].\n📊 Handles the economy operations of the Soccial Token …\nConstant space used by this struct in bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum amount allowed per airdrop transaction\nToken decimal places (standard 9 decimals)\nTotal supply of SCTK - 500.000.000 tokens * 10^9 = …\nDefault fee sent to the airdrop vault: 0%. No fee is …\nDefault fee sent to the rewards vault: 5% (500 BPS).\nBase unit for all fee calculations in basis points (BPS). …\nMaximum allowed airdrop fee: 5% (500 BPS).\nMaximum allowed fee per category (e.g., rewards, airdrop, …\nMaximum allowed reward fee: 10% (1_000 BPS).\nMinimum allowed fee (in BPS). This also constrains the …\n…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe user casting the vote.\nThe caller initiating the proposal creation.\nThe caller finalizing the proposal.\nThe caller managing governance settings (must be …\nCHECK: Sysvar clock for time-based logic.\nCHECK: Clock sysvar (used to verify voting end time).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGovernance state configuration.\nGovernance state config (tracks quorum, durations, …\nGovernance state config (holds quorum, durations, etc.).\nThe GovernanceState account holding all governance …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe proposal being voted on.\nThe new proposal account to be created (PDA using last_id).\nThe proposal being finalized.\nSystem program required to create the proposal account.\nSystem program (in case of future dynamic logic).\nSystem program used for possible rent-exempt operations or …\nToken mint of SCTK. CHECK: Verified via address constraint …\nGlobal token state for economics (e.g. decimals).\nGlobal token state (may be used for constraints or …\nGlobal token state (may be used in quorum logic).\nGlobal token configuration (may be referenced for …\nOptional user access account, used to check staff and …\nOptional user access permissions (e.g., staff or early …\nOptional user access permissions (e.g., to restrict or …\nOptional user access permissions (to validate …\nAssociated Token Account (ATA) of the caller for SCTK.\nVote receipt for this caller &amp; proposal (PDA created on …\nErrors related to governance operations.\nUser does not hold the minimum required tokens to vote.\nUser holds tokens, but not enough to meet the threshold to …\nThe provided proposal type does not match any known type.\nThe type of the finalized proposal does not match the …\nProposal has already been finalized and cannot be modified.\nThe proposal has already been used in a system action and …\nThe proposal has expired\nProposal is not yet finalized, so it cannot be executed.\nProposal did not meet quorum or was rejected.\nStaff accounts are not allowed to participate in voting.\nA proposal was configured with a start time in the past.\nUser attempted to vote before the voting period started.\nUser attempted to vote after the voting period ended.\nProposal is still in its voting period; cannot finalize …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the name of this [#enum_name].\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGlobal governance state account. Stores settings related …\nSpace calculation for GovernanceState account:\nSpace calculation for ProposalAccount account:\nIndividual governance proposal account. Stores information …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes the core economic components (vaults + token …\nInitializes the vesting schedules for the founding team …\nAccounts required for SPL token initialization and …\nInitializes the core configuration for the Soccial Token, …\nCHECK: Vault for airdrop distribution pool.\nCHECK: Vault\nCHECK: Vault\nCHECK: Associated Token Account of the mint authority. …\nCHECK: Mint authority’s ATA (used for minting tokens).\nThe caller that pays and signs for initialization.\nThe account initializing the economy setup.\nThe initializer of the SPL Token setup.\nThe initializer of the founders vesting schedules.\nCHECK: Token account owned by a PDA to collect tokens …\nCHECK: PDA that owns the fallback contract token account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCHECK: Global Governance configuration PDA.\nCHECK: Insurance vault for emergencies and unexpected …\nCHECK: Vault\nCHECK: Vault\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCHECK: Vault for general liquidity (main reserve).\nCHECK: Vault\nCHECK: Vault\nCHECK: Token Mint PDA (SCTK Mint).\nToken mint for the Soccial Token.\nCHECK: Mint Authority PDA for minting control.\nCHECK: Mint Authority PDA for minting control.\nCHECK: Vault reserved for off-chain conversions or fiat …\nCHECK: Vault\nCHECK: Vault\nCHECK: Vault holding tokens reserved for scheduled release.\nCHECK: Vault\nCHECK: Vault\nCHECK: Vault that receives platform revenue (e.g. fees).\nCHECK: Vault\nCHECK: Vault\nCHECK: Vault that holds tokens to be distributed as …\nCHECK: Vault\nCHECK: Vault\nCHECK: Staking state PDA.\nCHECK: Staking configuration and counters.\nCHECK: Vault holding tokens staked by users.\nCHECK: Vault\nCHECK: Vault\nPDA for the first founding team member’s vesting …\nPDA for the second founding team member’s vesting …\nCHECK: Mint for the main token (SCTK). Created separately.\nCHECK: Token State PDA to be created via invoke_signed.\nGlobal token state tracking supply and ownership.\nGlobal token state tracking economics and status flags.\nToken state tracking supply and configuration.\nCHECK: Treasury vault for operational and financial …\nCHECK: Vault\nCHECK: Vault\nCHECK: Vesting state PDA.\nVesting state tracking the global vesting IDs and …\nCHECK: Vault holding tokens for vesting purposes.\nCHECK: Vault\nCHECK: Vault\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the name of this [#enum_name].\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of tokens unlocked immediately at the start. …\nCliff period before tokens start unlocking (in seconds). …\nNumber of release cycles during the vesting duration. In …\nTotal vesting duration after the cliff (in seconds). …\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nInstruction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCHECK: PDA authority for airdrop logic. Verified in …\nCHECK: PDA authority for airdrop logic. Verified in …\nCHECK: PDA authority for airdrop logic. Verified in …\nToken account holding tokens reserved for airdrops.\nAirdrop vault’s token account.\nToken account holding tokens reserved for airdrops.\nCHECK: Airdrop vault ATA used in token transfer logic; …\nCHECK: Authority passed as signer and checked at runtime.\nToken account owned by the buyer, receives purchased …\nThe buyer executing the token purchase.\nThe caller initiating the deposit (must be authorized).\nThe caller initiating the transfer (must be authorized).\nCHECK: Authority expected to match recipient’s token …\nToken account receiving the tokens.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCHECK: PDA authority for liquidity vault operations. …\nToken account holding tokens available for purchase.\nCHECK: PDA authority for offchain reserve operations. …\nOffchain reserve vault’s token account.\nToken account receiving the transferred tokens.\nCHECK: PDA authority for revenue collection logic. …\nCHECK: PDA authority for revenue logic. Verified in …\nCHECK: PDA authority for revenue logic. Verified in …\nToken account accumulating revenue from token sales or …\nRevenue vault’s token account.\nToken account holding tokens allocated for revenue …\nCHECK: Revenue vault ATA used in token transfer logic; …\nCHECK: PDA authority for rewards distribution logic. …\nCHECK: PDA authority for rewards logic. Verified in …\nCHECK: PDA authority for rewards logic. Verified in …\nToken account holding tokens used for rewards distribution.\nRewards vault’s token account.\nToken account holding tokens designated for rewards.\nCHECK: Rewards vault ATA used in token transfer logic; …\nCHECK: The actual sender (must sign the transaction).\nToken account of the sender (must match mint and …\nCHECK: Passed as generic token account reference. …\nToken mint (SCTK).\nMint of the SCTK token.\nSPL Token mint (SCTK).\nToken program required for token transfers.\nSPL Token Program.\nSPL Token program.\nCHECK: Token program passed as generic account, validated …\nTokenState account for system-wide configuration.\nGlobal token configuration and state.\nGlobal token configuration.\nOptional access control account for the caller.\nOptional user access control (validated if present).\nOptional access control account for the caller.\nThe requested fee is above the allowed threshold defined …\nThe user does not have enough balance to complete the …\nThe provided amount is invalid (e.g., zero or negative).\nArithmetic overflow occurred during a calculation (e.g., …\nArithmetic underflow occurred during a calculation (e.g., …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the name of this [#enum_name].\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType representing the program.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdmin Adds a new admin to the contract.\nEarly Adopters &amp; Whitelist Adds a user to early adopter …\nUser Flags Adds a flag to the target user (e.g. …\nAdds a new staking plan.\nAdds more tokens to an existing stake (reinvestment or …\nAirdrop Distributes tokens via airdrop.\nPermissions Assigns a permission to a user.\nStaking Stakes tokens immediately after purchase using a …\nBuys tokens from the liquidity vault and transfers to the …\nCancels a vesting schedule.\nClaims staking rewards without withdrawing the stake.\nClaims vested tokens for a participant.\nCreates a new proposal.\nVesting Creates a vesting schedule for a participant.\nMints tokens from the Soccial Wallet (off-chain) into the …\nDisables a staking plan.\nEdits a staking plan.\n======================================================= …\nFinalizes a proposal after voting ends.\nInitializes the economic state components (liquidity, …\nInitializes the vesting schedule for the founding team.\nCreates and initializes a SPL Token Mint with the given …\nInitialize methods ordering:\nTransfers tokens from contract fallback ATA to a vault.\nContract Settings Pauses the entire contract, disabling …\nRemoves an admin from the contract.\nRemoves a flag from the target user.\nResumes the contract after it has been paused.\nSets a new API authority for the contract.\nLocks a vesting schedule as immutable.\nStakes tokens from the user’s wallet using a specified …\nTransfers tokens from one vault to another.\nDeposits tokens from the off-chain Soccial Wallet into the …\nRemoves a permission from a user.\nUpdates the airdrop fee (in BPS).\nUpdates governance settings dynamically.\nCreates or updates the token metadata URI on-chain.\nManage Economy Updates the rewards fee (in BPS).\nUpdates the contract version.\nUpdates an existing vesting schedule.\nDeposits tokens into a system vault.\nWithdraws tokens from a system vault.\nAdds a user to early adopter phase 1 list. Governance …\nWithdraws staked tokens after the lockup ends.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContext for managing global staking configuration.\nContext for releasing previously staked tokens.\nAssociated Token Program (used to validate token account …\nThe signer initiating the stake (usually the backend …\nThe caller initiating the staking (can be the user or an …\nThe caller initiating the staking (can be the user or an …\nThe caller releasing tokens (can be the user or admin).\nThe caller releasing tokens (can be the user or admin).\nThe admin or user managing the staking state.\nCHECK: Clock sysvar (used for time validation on staking …\nCHECK: Sysvar\nDestination token account (might be used for future mints …\nDestination token account (might be used for future mints …\nThe destination ATA for the user receiving released tokens.\nThe destination ATA for the user receiving released tokens.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCHECK: PDA authority, validated by seeds. No data is read …\nCHECK: PDA authority for liquidity operations. No data is …\nCHECK: PDA authority for liquidity operations. No data is …\nToken account owned by the liquidity vault PDA.\nToken account owned by the liquidity vault PDA.\nToken account owned by the liquidity vault PDA.\nThe token mint of SCTK.\nThe token mint of SCTK.\nCHECK: PDA that acts as mint authority. Only validated via …\nCHECK: PDA that acts as mint authority. Only validated via …\nCHECK: PDA authority that owns the vaults.\nCHECK: PDA authority that owns the vaults.\nCHECK: Used for address only; does not require validation. …\nCHECK: The wallet or PDA of the participant staking tokens.\nCHECK: The wallet or PDA of the participant staking tokens.\nParticipant’s token account (SCTK) – source of staked …\nParticipant’s token account (SCTK) – source of staked …\nThe wallet that will receive remaining lamports when …\nThe account that will store the staking metadata.\nThe account to store staking data for this specific stake.\nPDA storing stake metadata.\nCHECK: The staking account for the participant and …\nCHECK: The staking account for the participant and …\nGlobal staking configuration account.\nThe global staking state used to track all staking …\nThe global staking state used to track all staking …\nThe global staking state (config + counter).\nCHECK: PDA authority, validated by seeds. No data is read …\nCHECK: The staking_vault PDA that owns the staking ATA.\nCHECK: The staking_vault PDA that owns the staking ATA.\nCHECK: PDA representing the staking vault authority.\nCHECK: PDA representing the staking vault authority.\nToken account owned by the staking vault PDA (receives …\nToken account owned by the staking vault PDA – receives …\nToken account owned by the staking vault PDA – receives …\nThe ATA of the staking vault holding staked tokens.\nThe ATA of the staking vault holding staked tokens.\nSystem program required for account creations.\nThe token mint of the Soccial Token (SCTK).\nThe token mint of the Soccial Token (SCTK).\nThe token mint of the Soccial Token (SCTK).\nRequired SPL token program.\nGlobal token configuration and fee parameters.\nGlobal token configuration.\nGlobal token configuration.\nToken configuration and core settings.\nGlobal token configuration and settings.\nGlobal token configuration.\nOptional access control for the caller (can be used to …\nOptional access control for caller.\nOptional access control for caller.\nAccess control data for the caller.\nAccess control data for the caller.\nAccess control for permission validation.\nTokens have already been withdrawn from this stake.\nCannot edit a plan that is already in use.\nInsufficient staked balance to withdraw.\nUser’s wallet does not hold enough tokens to stake.\nVault does not have enough tokens to fulfill the stake.\nStaking amount must be greater than zero.\nThe staking plan is not active or doesn’t exist.\nLockup period has not yet ended.\nNo rewards are available to claim.\nArithmetic overflow during reward calculation.\nA plan with the specified ID already exists.\nStaking plan was not found.\nOverflow occurred during reward calculation.\nFailed to find a staking record for the given ID.\nThe staking period has not yet ended.\nMaximum number of staking plans reached.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the name of this [#enum_name].\n…\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n…\nByte size required to allocate the StakingAccount account.\nRepresents a single staking entry from a user.\nConfiguration for a staking plan (e.g., 30, 90, 180 dias)\nGlobal staking state and configurable plans\nWhether this plan is currently active.\nAdds a new staking plan to the system.\nAnnual Percentage Rate (APR) in basis points (e.g., 800 = …\nAnnual Percentage Rate (APR) in basis points (bps), copied …\nTotal number of completed reward cycles (for analytics or …\nDeactivates a staking plan (soft delete).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the staking plan by ID (if active)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe last used stake ID (used for PDA derivation).\nDuration of the lock-up period in seconds.\nDuration of each lock-up period (in seconds), copied from …\nThe participant (user) who staked tokens.\nUnique identifier of the plan (used to link in …\nIdentifier of the staking plan.\nList of available staking plans (fixed-size array for …\nUnique identifier for the stake (used for PDA).\nTotal amount of tokens staked (principal only).\nTimestamp of the <strong>current active cycle</strong> (updated after each …\nTotal rewards claimed so far across all cycles.\nThe total number of staking entries created across all …\nUpdates an existing plan’s lockup duration and APR.\nWhether the stake has been withdrawn (irreversible).\nThe caller performing contract-level operations.\nThe caller modifying contract settings via governance.\nThe caller emitting a system-level log message.\nThe signer initiating the instruction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGovernance state account (quorum config, etc).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCHECK: Metadata account (PDA derived from [b“metadata“…\nCHECK: PDA for the token mint\nCHECK: PDA used as both mint_authority and metadata …\nGovernance proposal approval needed for the instruction.\nSysvar Rent\nSystem program for potential rent and PDA operations.\nSystem program for potential rent and PDA operations.\nSystem program for CPI\nCHECK: Sysvar required by Metaplex CPI (read-only)\nCHECK: Token Metadata program (Metaplex)\nTokenState account managing the global configuration.\nTokenState account managing the global configuration.\nTokenState account for context verification.\nToken state account (used for current config if needed)\nOptional access control account for the caller.\nOptional access control account for the caller.\nOptional access control account for log authorization.\nThe token balance is too low to execute the requested …\nNot enough reserved supply available to proceed.\nTotal token supply would exceed the capped maximum.\nAn arithmetic overflow occurred.\nOnly the designated token owner can perform this action.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the name of this [#enum_name].\n…\nReturns the total serialized byte size of the <code>TokenState</code> …\nReturns the total serialized byte size of the <code>CoreSettings</code> …\nReturns the static size (in bytes) of the <code>VersionInfo</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe contract is currently paused.\nThe specified function does not exist or is disabled.\nThe provided account is invalid or does not meet …\nThe provided argument is invalid or malformed.\nThe permission string or key is invalid.\nA required argument was missing.\nNo tokens are available to release for this operation.\nNot enough arguments were provided to execute the …\nAttempted to remove the contract owner, which is not …\nPlatform mismatch occurred between caller and expected …\nToo many requests in a short period — try again later.\nSPL token mint must be initialized before use.\nThe token economy (governance, fee system) is not …\nThe token state account has not yet been initialized.\nCaller lacks required permission or authority.\nThe caller must be the initial contract owner to perform …\nThe platform specified is not supported.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the name of this [#enum_name].\nMath Error Codes\n…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the name of this [#enum_name].\n…\n…\n…\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe user initiating the deposit (must be authorized).\nThe user initiating the withdrawal (must be authorized).\nThe user triggering the vault-to-vault transfer (must be …\nThe user triggering the contract-to-vault transfer.\nCHECK: Metadata PDA of the destination vault.\nDestination vault’s ATA that will receive the tokens.\nDestination vault’s ATA to receive tokens.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlobal governance configuration account.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCHECK: The wallet or PDA of the participant making the …\nParticipant’s ATA holding SCTK tokens to deposit.\nOptional proposal linked to this vault transfer.\nCHECK: PDA authority of the contract (must match seeds).\nThe contract-owned source token account (fallback token …\nCHECK: Metadata account for the source vault. Must be …\nCHECK: Authority PDA for the source vault.\nSource vault’s ATA holding the tokens to transfer.\nThe SCTK token mint.\nSPL Token Program.\nSPL Token Program.\nSPL Token Program.\nSPL Token Program.\nGlobal TokenState configuration account.\nGlobal TokenState configuration account.\nGlobal TokenState configuration account.\nGlobal TokenState configuration account.\nOptional access control for participant permissions.\nOptional access control for withdrawal permission checks.\nOptional access control for transfer permission checks.\nOptional access control for permission checks.\nUser’s ATA to receive withdrawn tokens.\nCHECK: Vault metadata account (PDA). Must be validated in …\nCHECK: Vault metadata account (PDA). Must be validated in …\nCHECK: Vault authority PDA (must match seeds in logic).\nCHECK: Vault authority PDA (must match seeds in logic).\nVault’s ATA that will receive the deposited tokens.\nVault’s ATA holding tokens to be withdrawn.\nThe vault does not contain enough tokens for this …\nIt is not allowed to transfer tokens from a vault to …\nThe amount specified is invalid (zero or negative).\nThis action requires a governance proposal to be approved.\nCaller lacks permission or authority to perform this vault …\nThe vault type provided is not recognized or supported.\nAttempted to initialize a vault that is already set up.\nA critical internal invariant has been violated (e.g., …\nThe specified vault has not yet been initialized.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the name of this [#enum_name].\nDescribes types of vault transfers that require governance …\nEnum defining all supported vault types in the Soccial …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContext for releasing vested tokens, either by the …\nThe user or admin triggering the vesting release.\nThe caller managing vesting schedules.\nThe caller performing the action (e.g. cancel, update).\nThe caller performing the action (e.g. cancel, update).\nCHECK: Sysvar\nUser’s token account to receive vested tokens.\nParticipant’s associated token account (optional use).\nAssociated token account for participant (may receive …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCHECK: Liquidity vault PDA (source of vested tokens).\nCHECK: Liquidity vault PDA (source of refund tokens).\nToken account owned by <code>liquidity_vault</code> holding source …\nToken account owned by liquidity_vault.\nThe SPL token mint (SCTK).\nThe token mint used for vesting allocations.\nToken mint used for vesting allocations.\nCHECK: PDA authority over mint and vesting vaults.\nCHECK: PDA mint authority for vaults and transfers.\nCHECK: PDA mint authority.\nCHECK: The participant receiving the vesting schedule.\nCHECK: Participant associated with the vesting schedule.\nCHECK: Participant associated with the vesting schedule.\nSystem account to receive lamports when vesting account is …\nGlobal token configuration state.\nGlobal token configuration.\nAccess control metadata for the caller.\nOptional access control for the caller.\nOptional user access control account.\nOptional user access control account.\nThe schedule tracking vesting amounts and timestamps.\nVesting schedule account for this participant and vesting …\nVesting schedule being modified.\nVesting schedule being validated or marked immutable.\nGlobal vesting state to track ID counters and settings.\nCHECK: Vesting state (used optionally for stats or …\nCHECK: PDA representing the vault holding vested tokens.\nCHECK: Vesting vault PDA (target where tokens are locked).\nCHECK: Vesting vault PDA (holding reserved tokens).\nToken account owned by <code>vesting_vault</code>, holding vested …\nToken account owned by <code>vesting_vault</code> to receive reserved …\nToken account owned by vesting_vault.\nThe vesting schedule has already been cancelled.\nVesting schedule is already initialized for the given …\nThe cliff period is longer than the total vesting period, …\nLiquidity vault does not have enough available tokens to …\nAn invalid argument was provided (e.g., negative duration …\nThe cliff duration value is invalid (e.g., negative).\nThe configured start time is invalid (e.g., in the past or …\nVesting token amount must be strictly greater than zero.\nThe duration provided for vesting is invalid or too short.\nNo vested tokens are currently available to claim.\nThe vesting schedule is not active (e.g., was cancelled or …\nThis vesting schedule is immutable and cannot be edited.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the name of this [#enum_name].\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the byte size required to allocate the …\nRepresents a single vesting schedule for a participant.\nStores global state for vesting schedules.\nThe duration (in seconds) of the cliff period before any …\nNumber of vesting cycles. If set to 0, uses linear …\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether this vesting schedule can be modified after …\nThe number of tokens to release immediately at start …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe last time (timestamp) when the participant claimed …\nThe participant (user) who will receive the vested tokens.\nThe number of tokens that have already been released to …\nThe timestamp at which the vesting schedule starts.\nCurrent status of the vesting schedule: 0 = uninitialized, …\nThe total number of tokens allocated for this vesting …\nThe total duration (in seconds) over which all tokens will …\nA unique identifier for the vesting schedule (used for PDA …")