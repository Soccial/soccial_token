searchState.loadedDescShard("uriparse", 0, "Authority Component\nFragment Component\nPath Component\nQuery Component\nScheme Component\nURIs, Relative References, and URI References\nThe syntax for a future IP literal was used and is not …\nThe authority component as defined in [RFC3986, Section 3.2…\nAn error representing an invalid authority.\nThe username contained a <code>&#39;:&#39;</code> which is only to be used as a …\nThe host component of the authority as defined in […\nThe host component of the authority was invalid.\nAn error representing an invalid host.\nAn IPv4 address. Based on the <code>std</code>’s implementation, …\nAn IPv6 address. This will always be encased in brackets (…\nThe password contained an invalid character.\nAn invalid character was used in the port. Only decimal …\nThe username contained an invalid character.\nAn invalid character for an IPv4 address or registered …\nThe syntax for an IPv6 literal was used (i.e. <code>&quot;[...]&quot;</code>), …\nThe syntax for an IPv6 literal was used (i.e. <code>&quot;[...]&quot;</code>) and …\nThe syntax for a future IP literal was used (i.e. <code>&quot;[v*...]&quot;</code>…\nThe password contained an invalid percent encoding (e.g. …\nThe username contained an invalid percent encoding (e.g. …\nThe port was a valid number, but it was too large to fit …\nThe password component of the authority as defined in […\nThe password component of the authority was invalid.\nAn error representing an invalid password component.\nThe port component of the authority was invalid.\nAn error representing an invalid port.\nA host that is a registered name (i.e. not an IP literal).\nAny other host that does not follow the syntax of an IP …\nAn error representing an invalid registered name.\nThe username component of the authority as defined in […\nThe username component of the authority was invalid.\nAn error representing an invalid username component.\nReturns a new host which is identical but has a lifetime …\nReturns a new password which is identical but has a …\nReturns a new registered name which is identical but has a …\nReturns a new username which is identical but has a …\nReturns a <code>str</code> representation of the password.\nReturns a <code>str</code> representation of the registered name.\nReturns a <code>str</code> representation of the username.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new <code>Authority</code> from the individual parts: …\nReturns whether there is a password in the authority as …\nReturns whether there is a password in the authority as …\nReturns whether there is a username in the authority as …\nThe host component of the authority as defined in […\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>Authority</code> into an owned copy.\nConverts the <code>Host</code> into an owned copy.\nConverts the <code>Password</code> into an owned copy.\nConverts the <code>RegisteredName</code> into an owned copy.\nConverts the <code>Username</code> into an owned copy.\nConsumes the <code>Authority</code> and returns its parts: username, …\nReturns whether the host is an IPv4 address.\nReturns whether the host is an IPv6 address.\nReturns whether the authority is normalized.\nReturns whether the host is normalized.\nReturns whether the password is normalized.\nReturns whether the registered name is normalized.\nReturns whether the username is normalized.\nReturns whether the host is a registered name.\nMaps the host using the given map function.\nMaps the password using the given map function.\nMaps the port using the given map function.\nMaps the username using the given map function.\nNormalizes the authority.\nNormalizes the host such that all characters are …\nNormalizes the password such that it will have no bytes …\nNormalizes the registered name such that all characters …\nNormalizes the username such that it will have no bytes …\nParses the port from the given byte string.\nThe password component of the authority as defined in […\nThe port component of the authority as defined in […\nSets the host of the authority.\nSets the password of the authority.\nSets the port of the authority.\nSets the username of the authority.\nThe username component of the authority as defined in […\nThe fragment component as defined in [RFC3986, Section 3.5]…\nAn error representing an invalid fragment.\nThe fragment contained an invalid character.\nThe fragment contained an invalid percent encoding (e.g. …\nReturns a new fragment which is identical but has a …\nReturns a <code>str</code> representation of the fragment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>Fragment</code> into an owned copy.\nReturns whether the fragment is normalized.\nNormalizes the fragment such that it will have no bytes …\nThe path exceeded the maximum length allowed. Due to …\nThe path contained an invalid character.\nThe path contained an invalid percent encoding (e.g. <code>&quot;%ZZ&quot;</code>…\nThe path component as defined in [RFC3986, Section 3.3].\nAn error representing an invalid path.\nA segment of a path.\nReturns a new segment which is identical but has as …\nReturns a <code>str</code> representation of the segment.\nClears all segments from the path leaving a single empty …\nConstructs a segment that is empty.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>Path</code> into an owned copy.\nConverts the <code>Segment</code> into an owned copy.\nReturns whether the path is absolute (i.e. it starts with …\nReturns whether the segment is a dot segment, i.e., is <code>&quot;.&quot;</code> …\nReturns whether the segment is a dot segment, i.e., is <code>&quot;..&quot;</code>…\nReturns whether the path is normalized either as or as not …\nReturns whether the segment is normalized.\nReturns whether the path is relative (i.e. it does not …\nReturns whether the segment is a dot segment, i.e., is <code>&quot;.&quot;</code>.\nNormalizes the path and all of its segments.\nNormalizes the segment such that it will have no bytes …\nPops the last segment off of the path.\nPushes a segment onto the path.\nRemoves all dot segments from the path according to the …\nReturns the segments of the path.\nReturns the segments of the path mutably.\nSets whether the path is absolute (i.e. it starts with a …\nReturns a new path which is identical but has a lifetime …\nThe fragment contained an invalid character.\nThe fragment contained an invalid percent encoding (e.g. …\nThe query component as defined in [RFC3986, Section 3.4].\nAn error representing an invalid query.\nReturns a new query which is identical but has a lifetime …\nReturns a <code>str</code> representation of the query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>Query</code> into an owned copy.\nReturns whether the query is normalized.\nNormalizes the query such that it will have no bytes that …\nRepresents the case where there is no authority, but the …\nThe authority component of the relative reference was …\nThe fragment component of the relative reference was …\nThis error occurs when you do not specify a path component …\nWhen parsing from some byte string source, if the source …\nThe path component of the relative reference was invalid.\nThe query component of the relative reference was invalid.\nA relative reference as defined in [RFC3986, Section 4.1].\nA builder type for [<code>RelativeReference]</code>.\nAn error representing an invalid relative reference.\nRepresents the case where the first path segment contains …\nReturns the authority, if present, of the relative …\nSets the authority part of the relative reference.\nConsumes the builder and tries to build a <code>RelativeReference</code>…\nConstructs a default builder for a relative reference.\nReturns the fragment, if present, of the relative …\nSets the fragment part of the relative reference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new <code>RelativeReference</code> from the individual …\nReturns whether the relative reference has an authority …\nReturns whether the relative reference has a fragment …\nReturns whether the relative reference has a password …\nReturns whether the relative reference has a port.\nReturns whether the relative reference has a query …\nReturns whether the relative reference has a username …\nReturns the host, if present, of the relative reference.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the relative reference and converts it into a …\nConverts the <code>RelativeReference</code> into an owned copy.\nConsumes the <code>RelativeReference</code> and returns its parts: …\nReturns whether the relative reference is an absolute path …\nReturns whether the relative reference is a network path …\nReturns whether the relative reference is normalized.\nReturns whether the relative reference is a relative path …\nMaps the authority using the given map function.\nMaps the fragment using the given map function.\nMaps the path using the given map function.\nMaps the query using the given map function.\nConstructs a new builder with nothing set.\nNormalizes the relative reference.\nReturns the password, if present, of the relative …\nReturns the path of the relative reference.\nSets the path part of the relative reference.\nReturns the port, if present, of the relative reference.\nReturns the query, if present, of the relative reference.\nSets the query part of the relative reference.\nSets the authority of the relative reference.\nSets the fragment of the relative reference.\nSets the path of the relative reference.\nSets the query of the relative reference.\nReturns a new relative reference which is identical but …\nSets the authority part of the relative reference.\nSets the fragment part of the relative reference.\nSets the path part of the relative reference.\nSets the query part of the relative reference.\nReturns the username, if present, of the relative …\nConsumes the builder and sets the authority part of the …\nConsumes the builder and sets the fragment part of the …\nConsumes the builder and sets the path part of the …\nConsumes the builder and sets the query part of the …\nThe scheme component was empty.\nA scheme registered due to historical use. Generally, it …\nThe scheme contained an invalid scheme character.\nA scheme that has been expertly reviewed.\nA scheme that was registered on a first come first served …\nThe scheme component as defined in [RFC3986, Section 3.5]. …\nAn error representing an invalid scheme.\nThe registration status of a scheme. See RFC 7595 for more …\nThe scheme did not start with an alphabetic character.\nA scheme that is not currently registerd under iana.org.\nA scheme that is not in the registered schemes.\nAn error representing that the unregistered scheme was an …\nReturns a new unregistered scheme which is identical but …\nReturns a new scheme which is identical but has a lifetime …\nReturns a <code>str</code> representation of the scheme.\nReturns a <code>str</code> representation of the scheme.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>UnregisteredScheme</code> into an owned copy.\nConverts the <code>Scheme</code> into an owned copy.\nReturns whether the scheme status is historical.\nReturns whether the scheme is normalized.\nReturns whether the scheme is normalized.\nReturns whether the scheme status is historical.\nReturns whether the scheme status is historical.\nReturns whether the scheme status is historical.\nNormalizes the scheme so that it is all lowercase.\nNormalizes the scheme so that it is all lowercase.\nReturns the registration status of the scheme.\nRepresents the case when there is no authority, but the …\nThe authority component of the relative reference was …\nThe fragment component of the relative reference was …\nThis error occurs when you do not specify a path component …\nThis error occurs when you do not specify a scheme …\nWhen parsing from some byte string source, if the source …\nThe path component of the relative reference was invalid.\nThe query component of the relative reference was invalid.\nThe scheme component of the relative reference was invalid.\nA Uniform Resource Identifier (URI) as defined in RFC3986.\nA builder type for [<code>URI]</code>.\nAn error representing an invalid URI.\nReturns the authority, if present, of the URI.\nSets the authority part of the URI.\nConsumes the builder and tries to build a <code>URI</code>.\nConstructs a default builder for a URI.\nReturns whether the URI can act as a base URI.\nReturns the fragment, if present, of the URI.\nSets the fragment part of the URI.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new <code>URI</code> from the individual parts: scheme, …\nReturns whether the URI has an authority component.\nReturns whether the URI has a fragment component.\nReturns whether the URI has a password component.\nReturns whether the URI has a port.\nReturns whether the URI has a query component.\nReturns whether the URI has a username component.\nReturns the host, if present, of the URI.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the URI into a base URI (i.e. the fragment …\nConsumes the URI and converts it into a builder with the …\nConverts the <code>URI</code> into an owned copy.\nConsumes the <code>URI</code> and returns its parts: scheme, authority, …\nReturns whether the URI is normalized.\nMaps the authority using the given map function.\nMaps the fragment using the given map function.\nMaps the path using the given map function.\nMaps the query using the given map function.\nMaps the scheme using the given map function.\nConstructs a new builder with nothing set.\nNormalizes the URI.\nReturns the password, if present, of the URI.\nReturns the path of the URI.\nSets the path part of the URI.\nReturns the port, if present, of the URI.\nReturns the query, if present, of the URI.\nSets the query part of the URI reference.\nCreates a new URI which is created by resolving the given …\nReturns the scheme of the URI.\nSets the scheme part of the URI reference.\nSets the authority of the URI.\nSets the fragment of the URI.\nSets the path of the URI.\nSets the query of the URI.\nSets the scheme of the URI.\nReturns a new URI which is identical but has a lifetime …\nSets the authority part of the URI.1\nSets the fragment part of the URI.\nSets the path part of the URI.\nSets the query part of the URI.\nSets the scheme part of the URI.\nReturns the username, if present, of the URI.\nConsumes the builder and sets the authority part of the …\nConsumes the builder and sets the fragment part of the URI.\nConsumes the builder and sets the path part of the URI.\nConsumes the builder and sets the query part of the URI.\nConsumes the builder and sets the scheme part of the URI.\nRepresents the case when there is no authority, but the …\nThe authority component of the relative reference was …\nThe fragment component of the relative reference was …\nThis error occurs when you do not specify a path component …\nThe path component of the relative reference was invalid.\nThe query component of the relative reference was invalid.\nThe scheme component of the relative reference was invalid.\nRepresents the case when there is no authority, but the …\nA URI reference as defined in [RFC3986, Section 4.1].\nA builder type for [<code>URIReference]</code>.\nAn error representing an invalid URI reference.\nReturns the authority, if present, of the URI reference.\nSets the authority part of the URI reference.\nConsumes the builder and tries to build a <code>URIReference</code>.\nConstructs a default builder for a URI reference.\nReturns whether the URI reference can act as a base URI.\nReturns the fragment, if present, of the URI reference.\nSets the fragment part of the URI reference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new <code>URIReference</code> from the individual parts: …\nReturns whether the URI reference has an authority …\nReturns whether the URI reference has a fragment component.\nReturns whether the URI reference has a password component.\nReturns whether the URI reference has a port.\nReturns whether the URI reference has a query component.\nReturns whether the URI reference has a scheme component.\nReturns whether the URI reference has a username component.\nReturns the host, if present, of the URI reference.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the URI reference and converts it into a builder …\nConverts the <code>URIReference</code> into an owned copy.\nConsumes the <code>URIReference</code> and returns its parts: scheme, …\nReturns whether the URI reference is an absolute path …\nReturns whether the URI reference is a network path …\nReturns whether the URI reference is normalized.\nReturns whether the URI reference is a relative path …\nReturns whether the URI reference is a relative reference.\nReturns whether the URI reference is a URI.\nMaps the authority using the given map function.\nMaps the fragment using the given map function.\nMaps the path using the given map function.\nMaps the query using the given map function.\nMaps the scheme using the given map function.\nConstructs a new builder with nothing set.\nNormalizes the URI reference.\nReturns the password, if present, of the URI reference.\nReturns the path of the URI reference.\nSets the path part of the URI reference.\nReturns the port, if present, of the URI reference.\nReturns the query, if present, of the URI reference.\nSets the query part of the URI reference.\nReturns the scheme, if present, of the URI reference.\nSets the scheme part of the URI reference.\nSets the authority of the URI reference.\nSets the fragment of the URI reference.\nSets the path of the URI reference.\nSets the query of the URI reference.\nSets the scheme of the URI reference.\nReturns a new URI reference which is identical but has a …\nSets the authority part of the URI reference.\nSets the fragment part of the URI reference.\nSets the path part of the URI reference.\nSets the query part of the URI reference.\nSets the scheme part of the URI reference.\nReturns the username, if present, of the URI reference.\nConsumes the builder and sets the authority part of the …\nConsumes the builder and sets the fragment part of the URI …\nConsumes the builder and sets the path part of the URI …\nConsumes the builder and sets the query part of the URI …\nConsumes the builder and sets the scheme part of the URI …")