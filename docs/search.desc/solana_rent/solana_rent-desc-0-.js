searchState.loadedDescShard("solana_rent", 0, "Configuration for network rent.\nAccount storage overhead for calculation of base rent.\nDefault percentage of collected rent that is burned.\nDefault amount of time (in years) the balance has to …\nDefault rental rate in lamports/byte-year.\nUsed to indicate the account is rent exempt.\nThe account owes this much rent.\nConfiguration of network rent.\nThe return value of <code>Rent::due</code>.\nThe percentage of collected rent that is burned.\nCalculate how much rent to burn from the collected rent.\nRent due on account’s data length with balance.\nRent due for account that is known to be not exempt.\nAmount of time (in years) a balance must include rent for …\nCreates a <code>Rent</code> that charges no lamports.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether a given balance and data length would be exempt.\nReturn ‘true’ if rent exempt.\nReturn the lamports due for rent.\nRental rate in lamports/byte-year.\nMinimum balance due for rent-exemption of a given account …\nCreates a <code>Rent</code> that is scaled based on the number of slots …\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.")