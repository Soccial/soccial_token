searchState.loadedDescShard("spl_token_confidential_transfer_proof_generation", 0, "The bit length of the encrypted remaining balance in a …\nThe high bit length of the encrypted transfer amount\nThe low bit length of the encrypted transfer amount\nCombine two numbers that are interpretted as the low and …\nTakes in a 64-bit number <code>amount</code> and a bit length <code>bit_length</code>…\nThe proof data required for a confidential burn instruction\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe proof data required for a confidential mint instruction\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe proof data required for a confidential transfer …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe proof data required for a confidential transfer …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProof data required for a withdraw instruction\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")