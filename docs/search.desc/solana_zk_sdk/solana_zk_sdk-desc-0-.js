searchState.loadedDescShard("solana_zk_sdk", 0, "The <code>solana-zk-sdk</code> crate contains tools to create and …\nCollection of encryption-related data structures and …\nErrors related to proving and verifying proofs.\nThe native ZK ElGamal proof program.\nByte length of a complete authenticated encryption …\nByte length of an authenticated encryption secret key\nByte length of a decrypt handle\nByte length of an ElGamal ciphertext\nByte length of an ElGamal keypair\nByte length of an ElGamal public key\nByte length of an ElGamal secret key\nByte length of a Pedersen commitment.\nByte length of a Pedersen opening.\nAuthenticated encryption implementation.\nThe discrete log implementation for the twisted ElGamal …\nThe twisted ElGamal encryption implementation.\nThe twisted ElGamal group encryption implementation.\nPedersen commitment implementation using the Ristretto …\nAuthenticated encryption nonce and ciphertext\nEncrypts an amount under the authenticated encryption key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDerive an authenticated encryption key from a signature.\nDeterministically derives an authenticated encryption key …\nGenerates a random authenticated encryption key.\nDerive a seed from a signature used to generate an …\nDerive a seed from a Solana signer used to generate an …\nPre-computed HashMap needed for decryption. The HashMap is …\nType that captures a discrete log challenge.\nSolves the discrete log problem under the assumption that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerator point for discrete log\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDiscrete log instance constructor.\nAdjusts number of threads in a discrete log instance.\nAdjusts inversion batch size in a discrete log instance.\nTarget point for discrete log\nDecryption handle for Pedersen commitment.\nAlgorithm handle for the twisted ElGamal encryption scheme\nCiphertext for the ElGamal encryption scheme.\nA (twisted) ElGamal encryption keypair.\nPublic key for the ElGamal encryption scheme.\nSecret key for the ElGamal encryption scheme.\nDecrypts a ciphertext using the ElGamal secret key.\nDecrypts the ciphertext using an ElGamal secret key.\nGenerates a decryption handle for an ElGamal public key …\nDecrypts a ciphertext using the ElGamal secret key …\nDecrypts the ciphertext using an ElGamal secret key …\nOn input an amount, the function returns a twisted ElGamal …\nEncrypts an amount under the public key.\nEncrypts an amount under the public key and an input …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDerive an ElGamal secret key from an entropy seed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an ElGamal secret key to an ElGamal keypair.\nDerives the <code>ElGamalPubkey</code> that uniquely corresponds to an …\nCreate an ElGamal keypair from an ElGamal public key and …\nDerive an ElGamal keypair from a signature.\nDerive an ElGamal secret key from a signature.\nDeterministically derives an ElGamal keypair from a Solana …\nDeterministically derives an ElGamal secret key from a …\nGenerates the public and secret keys for ElGamal …\nRandomly samples an ElGamal secret key.\nReads a JSON-encoded keypair from a <code>Reader</code> implementor\nReads keypair from a file\nDerive an ElGamal secret key from a signature.\nDerive a seed from a Solana signer used to generate an …\nWrites to a <code>Write</code> implementer with JSON-encoding\nWrite keypair to a file with JSON-encoding\nAlgorithm handle for the grouped ElGamal encryption\nA grouped ElGamal ciphertext.\nDecrypts the grouped ElGamal ciphertext using an ElGamal …\nDecrypts the grouped ElGamal ciphertext to a number that …\nEncrypts an amount under an array of ElGamal public keys.\nEncrypts an amount under an array of ElGamal public keys …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a grouped ElGamal ciphertext into a regular …\nPedersen base point for encoding messages to be committed.\nPedersen base point for encoding the commitment openings.\nAlgorithm handle for the Pedersen commitment scheme.\nPedersen commitment type.\nPedersen opening type.\nOn input a message (numeric amount), the function returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOn input a message (numeric amount), the function returns …\nOn input a message (numeric amount) and a Pedersen …\nPlain Old Data types for the AES128-GCM-SIV authenticated …\nPlain Old Data types for the ElGamal encryption scheme.\nPlain Old Data types for the Grouped ElGamal encryption …\nPlain Old Data type for the Pedersen commitment scheme.\nThe <code>AeCiphertext</code> type as a <code>Pod</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>DecryptHandle</code> type as a <code>Pod</code>.\nThe <code>ElGamalCiphertext</code> type as a <code>Pod</code>.\nThe <code>ElGamalPubkey</code> type as a <code>Pod</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>GroupedElGamalCiphertext</code> type with two decryption …\nThe <code>GroupedElGamalCiphertext</code> type with three decryption …\nExtract the commitment component from a grouped ciphertext\nExtract the commitment component from a grouped ciphertext\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract a regular ElGamal ciphertext using the decrypt …\nExtract a regular ElGamal ciphertext using the decrypt …\nThe <code>PedersenCommitment</code> type as a <code>Pod</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.\nInstructions provided by the <code>ZK ElGamal proof</code> program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClose a zero-knowledge proof context state.\nPubkeys associated with a context state account to be used …\nVerify a batched grouped-ciphertext with 2 handles …\nVerify a batched grouped-ciphertext with 3 handles …\nVerify 128-bit batched range proof.\nVerify 256-bit batched range proof.\nVerify a 64-bit batched range proof.\nVerify a ciphertext-ciphertext equality proof.\nVerify a ciphertext-commitment equality proof.\nVerify a grouped-ciphertext with 2 handles validity proof.\nVerify a grouped-ciphertext with 3 handles validity proof.\nVerify a percentage-with-cap proof.\nVerify a public key validity zero-knowledge proof.\nVerify a zero-ciphertext proof.\nCreate a <code>CloseContextState</code> instruction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEmpty proof type used to distinguish if a proof context …\nThe batched range proof instructions.\nThe ciphertext-ciphertext equality proof instruction.\nThe ciphertext-commitment equality proof instruction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe percentage-with-cap proof instruction.\nThe public-key validity proof instruction.\nThe zero-ciphertext proof instruction.\nThe instruction data that is needed for the …\nThe instruction data that is needed for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe context data needed to verify a range-proof for a …\nThe 128-bit batched range proof instruction.\nThe 256-bit batched range proof instruction.\nThe 64-bit batched range proof instruction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe instruction data that is needed for the …\nThe context data for a batched range proof\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe batched range proof\nThe instruction data that is needed for the …\nThe context data for a batched range proof\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe batched range proof\nThe instruction data that is needed for the …\nThe context data for a batched range proof\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe batched range proof\nThe context data needed to verify a ciphertext-ciphertext …\nThe instruction data that is needed for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe context data needed to verify a ciphertext-commitment …\nThe instruction data that is needed for the …\nThe ciphertext encrypted under the ElGamal pubkey\nThe Pedersen commitment\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ElGamal pubkey\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe instruction data that is needed for the …\nThe instruction data that is needed for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe context data needed to verify a percentage-with-cap …\nThe instruction data that is needed for the …\nThe Pedersen commitment to the claimed amount.\nThe Pedersen commitment to the delta amount.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum cap bound.\nThe Pedersen commitment to the percentage amount.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe context data needed to verify a pubkey validity proof.\nThe instruction data that is needed for the …\nThe context data for the public key validity proof\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProof that the public key is well-formed\nThe public key to be proved\nThe context data needed to verify a zero-ciphertext proof.\nThe instruction data that is needed for the …\nThe ElGamal ciphertext that encrypts zero\nThe context data for the zero-ciphertext proof\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProof that the ciphertext is zero\nThe ElGamal pubkey associated with the ElGamal ciphertext\nThe proof context account state\nThe <code>ProofContextState</code> without the proof context itself. …\nThe proof context authority that can close the account\nThe proof context authority that can close the account\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe proof context data\nThe proof type for the context data\nThe proof type for the context data\nInterpret a slice as a <code>ProofContextState</code>.")