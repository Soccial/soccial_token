searchState.loadedDescShard("solana_stake_interface", 0, "The Stake program interface.\nThe minimum number of epochs before stake account that is …\nConfig for staking.\nA type to hold data for the <code>StakeHistory</code> sysvar.\nUtility functions\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\npercentage of stake lost when slash, expressed as a …\nhow much stake we can activate/deactivate per-epoch as a …\nStake already deactivated.\nCustodian address not present.\nCustodian signature not present.\nStake action is not permitted while the epoch rewards …\nDelegation amount is less than the minimum.\nInsufficient voting activity in the reference vote account.\nSplit amount is more than is staked.\nLockup has not yet expired.\nStake account merge failed due to different authority, …\nStake account with transient stake cannot be merged.\nStake account has not been delinquent for the minimum …\nNot enough credits to redeem.\nStake redelegation to the same vote account is not …\nStake account with transient or inactive stake cannot be …\nRedelegated stake must be fully activated before …\nReasons the Stake might have had an error.\nOne re-delegation permitted per epoch.\nStake account is not delegated to the provided vote …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAuthorize a key to manage stake or withdrawal\nAuthorize a key to manage stake or withdrawal\nAuthorize a key to manage stake or withdrawal with a …\nAuthorize a key to manage stake or withdrawal with a …\nDeactivates the stake in the account\nDeactivate stake delegated to a vote account that has been …\nDelegate a stake to a particular vote account\nGet the minimum stake delegation, in lamports\nInitialize a stake with lockup and authorization …\nInitialize a stake with authorization information\nMerge two stake accounts.\nMove unstaked lamports between accounts with the same …\nMove stake between accounts with the same authorities and …\nRedelegate activated stake to another vote account.\nSet stake lockup\nSet stake lockup\nSplit <code>u64</code> tokens and stake off a stake account into …\nWithdraw unstaked lamports from the stake account\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.\nStake must be fully activated before deactivation is …\nAdditional flags for stake state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unit of time a given leader schedule is honored.\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nepoch at which this stake was activated, <code>std::u64::MAX</code> if …\ncredits observed is credits from vote account state when …\ncustodian signature on a transaction exempts the operation …\nepoch the stake was deactivated, <code>std::u64::MAX</code> if not …\nepoch height at which this stake will allow withdrawal, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe fixed number of bytes used to serialize each stake …\nThe fixed number of bytes used to serialize each stake …\nactivated stake amount, set at delegate() time\nUnixTimestamp at which this stake will allow withdrawal, …\nto whom the stake is delegated\nhow much stake we can activate per-epoch as a fraction of …\nCheck if the provided <code>epoch_credits</code> demonstrate active …\nCheck if the provided <code>epoch_credits</code> demonstrate …\nHelper function for programs to call <code>GetMinimumDelegation</code> …")