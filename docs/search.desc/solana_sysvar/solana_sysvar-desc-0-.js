searchState.loadedDescShard("solana_sysvar", 0, "Access to special accounts with dynamically-updated data.\nA type that holds sysvar data.\nInformation about the network’s clock, ticks, slots, etc.\nEpoch rewards for current epoch\nInformation about epoch duration.\nCurrent cluster fees.\nReturns the argument unchanged.\nDeserializes the sysvar from its <code>AccountInfo</code>.\nLoad the sysvar directly from the runtime.\nImplements the <code>Sysvar::get</code> method for both SBF and host …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> of the given <code>Pubkey</code> is a sysvar account.\nInformation about the last restart slot (hard fork).\nImplementations of syscalls used when <code>solana-program</code> is …\nInformation about recent blocks and their fee calculators.\nConfiguration for network rent.\nThis sysvar is deprecated and unused.\nThe size in bytes of the sysvar as serialized account data.\nThe most recent hashes of a slot’s parent banks.\nA bitvector of slots present over the last epoch.\nHistory of stake activations and de-activations.\nSerializes the sysvar to <code>AccountInfo</code>.\nAllows on-chain programs to implement program-specific …\nReasons the program may fail\nPrograms indicate success with a return value of 0\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA representation of network time.\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nThe current <code>Epoch</code>.\nThe timestamp of the first <code>Slot</code> in this <code>Epoch</code>.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nThe future <code>Epoch</code> for which the leader schedule has most …\nThe current <code>Slot</code>.\nThe approximate real world time of the current slot.\nThe const program ID.\nWhether the rewards period (including calculation and …\nReturns <code>true</code> if given pubkey is the program ID.\nThe rewards currently distributed for the current epoch, …\nThe starting block height of the rewards distribution in …\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nNumber of partitions in the rewards distribution in the …\nThe blockhash of the parent block of the first block in …\nThe total rewards points calculated for the current epoch, …\nThe total rewards calculated for the current epoch. This …\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nThe first epoch after the warmup period.\nThe first slot after the warmup period.\nReturns the argument unchanged.\nget epoch for the given slot\nget epoch and offset into the epoch for the given slot\nget the epoch for which the given slot should save off …\nget the length of the given epoch (in slots)\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nA number of slots before beginning of an epoch to calculate\nThe maximum number of slots in each epoch.\nWhether epochs start short and grow.\nTransaction fees.\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nThe last restart <code>Slot</code>.\nSafety\nSafety\nSafety\nSafety\nThe const program ID.\nContains recent block hashes and fee calculators.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe const program ID.\nConfiguration of network rent.\nThe percentage of collected rent that is burned.\nCalculate how much rent to burn from the collected rent.\nReturns <code>true</code> if given pubkey is the program ID.\nRent due on account’s data length with balance.\nRent due for account that is known to be not exempt.\nAmount of time (in years) a balance must include rent for …\nCreates a <code>Rent</code> that charges no lamports.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nWhether a given balance and data length would be exempt.\nRental rate in lamports/byte-year.\nMinimum balance due for rent-exemption of a given account …\nCreates a <code>Rent</code> that is scaled based on the number of slots …\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nThe const program ID.\nA bytemuck-compatible (plain old data) version of <code>SlotHash</code>.\nAPI for querying of the <code>SlotHashes</code> sysvar by on-chain …\nAPI for querying the <code>SlotHashes</code> sysvar.\nA type that holds sysvar data and has an associated sysvar …\nReturn the <code>SlotHashes</code> sysvar data as a slice of <code>PodSlotHash</code>…\nReturns <code>true</code> if given pubkey is the program ID.\nReturns <code>true</code> if the given pubkey is the program ID.\nFetch all of the raw sysvar data using the <code>sol_get_sysvar</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a value from the sysvar entries by its key. Returns …\nGiven a slot, get its corresponding hash in the <code>SlotHashes</code> …\nReturns the program ID.\nThe <code>Pubkey</code> of the sysvar.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the position of an entry in the sysvar by its key. …\nGiven a slot, get its position in the <code>SlotHashes</code> sysvar …\nAccount information\nAllows on-chain programs to implement program-specific …\nThe const program ID.\nReasons the program may fail\nA bitvector indicating which slots are present in the past …\nReturns <code>true</code> if given pubkey is the program ID.\nThe data held in this account.  Modifiable by programs.\nThis account’s data contains a loaded program (and is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWas the transaction signed by this account’s public key?\nIs the account writable?\nPublic key of the account\nThe lamports in the account.  Modifiable by programs.\nReturn the account’s original data length when it was …\nProgram that owns this account\nRealloc the account’s data and optionally …\nThe epoch at which this account will next owe rent\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")