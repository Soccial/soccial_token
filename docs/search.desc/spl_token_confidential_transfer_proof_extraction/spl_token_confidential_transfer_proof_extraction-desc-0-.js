searchState.loadedDescShard("spl_token_confidential_transfer_proof_extraction", 0, "Utility functions to simplify the handling of ZK ElGamal …\nThe proof context information needed to process a …\nThe public keys associated with a confidential burn\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe proof is pre-verified into a context state account.\nThe proof data\nThe proof is included in the same transaction of a …\nA proof data type to distinguish between proof data …\nA proof location type meant to be used for arguments to …\nThe address of a record account containing the proof data …\nChecks that the supplied program ID is correct for the ZK …\nDecodes the proof context data associated with a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the proof location is an instruction offset\nProcesses a proof location for instruction creation. Adds …\nVerify zero-knowledge proof and return the corresponding …\nConverts a zk proof type to a corresponding ZK ElGamal …\nThe proof context information needed to process a …\nThe public keys associated with a confidential mint\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe proof context information needed to process a [Transfer…\nThe transfer public keys associated with a transfer.\nAuditor ElGamal public key\nCiphertext containing the high 32 bits of the transfer …\nCiphertext containing the low 16 bits of the transfer …\nDestination ElGamal public key\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe new source available balance ciphertext\nSource ElGamal public key\nThe transfer public keys associated with a transfer\nThe proof context information needed to process a [Transfer…\nThe transfer public keys associated with a transfer with …\nAuditor ElGamal public key\nGroup encryption of the high 48 bits of the transfer amount\nGroup encryption of the low 16 bits of the transfer amount\nDestination ElGamal public key\nThe transfer fee encryption of the hi 32 bits of the …\nThe transfer fee encryption of the low 16 bits of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe final spendable ciphertext after the transfer,\nSource ElGamal public key\nThe public encryption keys associated with the transfer: …\nWithdraw withheld authority public key\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")