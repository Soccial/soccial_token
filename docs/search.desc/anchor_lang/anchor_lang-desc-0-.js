searchState.loadedDescShard("anchor_lang", 0, "Anchor ⚓ is a framework for Solana’s Sealevel runtime …\nA data structure that can be deserialized and stored into …\nA data structure that can be serialized and stored into …\nA data structure of validated accounts that can be …\nImplements an <code>Accounts</code> deserializer on the given struct. …\nThe close procedure to initiate garabage collection of an …\nThe exit procedure for an account. Any cleanup or …\nBorsh is the default serialization format for instructions …\nA data-structure that can be serialized into binary format …\nBump seed for program derived addresses.\nAssociated bump seeds for <code>Accounts</code>.\nStruct to hold account bump seeds.\nDefines a trait for checking the id of a program.\nDefines a trait for checking the owner of a program.\nDiscriminator slice.\nUnique identifier for a type.\nContains the error value\nAn event that can be emitted via a Solana log. See <code>emit!</code> …\nDefines the id of a program.\nDefines the possible ids of a program.\nImplements a <code>Space</code> trait on the given struct or enum.\nCalculates the data for an instruction invocation, where …\nDefines the Pubkey of an account.\nLamports related utility methods for accounts.\nContains the success value\nDefines an address expected to own an account.\nDefines a list of addresses expected to own an account.\nDefines the space of an account for initialization.\nTransformation to an <code>AccountInfo</code> struct.\nTransformation to <code>AccountInfo</code> structs.\nTransformation to <code>AccountMeta</code> structs.\nAn account data structure capable of zero copy …\nExecutes the given access control method before running …\nAn attribute for a data structure representing a Solana …\nAccount types that can be used in the account validation …\nAdd lamports to the account.\nA marker attribute used to mark const values that should …\nData structures that are used to provide non-argument …\nDefines the program’s ID. This should be used at the …\nDeclare an external program based on its IDL.\nDeserializes this instance from a given slice of bytes. …\nLogs an event that can be subscribed to by clients. Uses …\nReturns with the given error. Use this with a custom error …\nGenerates an <code>Error::AnchorError</code> that includes file and …\nGenerates <code>Error</code> and <code>type Result&lt;T&gt; = Result&lt;T, Error&gt;</code> …\nThe event attribute allows a struct to be used with emit! …\n<code>program_id</code> is the currently executing program.\nReturns the argument unchanged.\nGet the lamports of the account.\nThis attribute is used to override the Anchor defaults of …\nCalls <code>U::from(self)</code>.\nThe prelude contains all commonly used components of the …\nThe <code>#[program]</code> attribute defines the module containing all …\nConvenience macro to define a static public key.\nEnsures a condition is true, otherwise returns with the …\nEnsures two NON-PUBKEY values are equal.\nEnsures the first NON-PUBKEY value is greater than the …\nEnsures the first NON-PUBKEY value is greater than or equal\nEnsures two pubkeys values are equal.\nEnsures two pubkeys are not equal.\nEnsures two NON-PUBKEY values are not equal.\nCreates a <code>Source</code>\nSubtract lamports from the account.\n<code>is_signer</code> is given as an optional override for the signer …\nReturns the validated accounts struct. What constitutes “…\nDeserializes previously initialized account data. Should …\nDeserializes account data without checking the account …\nDeserialize this instance from a slice of bytes.\nSerializes the account data into <code>writer</code>.\nSerialize this instance into a vector of bytes.\nClears <code>data</code> and writes instruction data to it.\nA data structure that can be used as an internal field for …\nAccount container that checks ownership on deserialization.\nAccountInfo can be used as a type but Unchecked Account …\nType facilitating on demand zero copy deserialization.\nBox type to save stack space.\nType validating that the account is one of a set of given …\nAccount container that checks ownership on deserialization.\nOption type for optional accounts.\nType validating that the account is the given Program\nType validating that the account signed the transaction\nType validating that the account is owned by the system …\nType validating that the account is a sysvar and …\nExplicit wrapper for AccountInfo types to emphasize that …\nWrapper around <code>AccountInfo</code> that verifies program ownership …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReloads the account from storage. This is useful, for …\nSets the inner account.\nDeserializes the given <code>info</code> into a <code>Account</code>.\nDeserializes the given <code>info</code> into a <code>Account</code> without checking\nType facilitating on demand zero copy deserialization.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a Ref to the account data structure for reading.\nReturns a <code>RefMut</code> to the account data structure for reading …\nReturns a <code>RefMut</code> to the account data structure for reading …\nConstructs a new <code>Loader</code> from a previously initialized …\nConstructs a new <code>Loader</code> from an uninitialized account.\nType validating that the account is one of a set of given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDeserializes the given <code>info</code> into a <code>Program</code>.\nWrapper around <code>AccountInfo</code> that verifies program ownership …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReloads the account from storage. This is useful, for …\nSets the inner account.\nDeserializes the given <code>info</code> into a <code>InterfaceAccount</code>.\nDeserializes the given <code>info</code> into a <code>InterfaceAccount</code> …\nType validating that the account is the given Program\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDeserializes the given <code>info</code> into a <code>Program</code>.\nType validating that the account signed the transaction. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDeserializes the given <code>info</code> into a <code>Signer</code>.\nType validating that the account is owned by the system …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nType validating that the account is a sysvar and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExplicit wrapper for AccountInfo types to emphasize that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProvides non-argument inputs to the program.\nContext specifying non-argument inputs for …\nDeserialized accounts.\nBump seeds found during constraint validation. This is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCurrently executing program id.\nRemaining accounts given but not deserialized or validated.\n3003 - Failed to deserialize the account\n3004 - Failed to serialize the account\n3000 - The account discriminator was already set on this …\n3002 - Account discriminator did not match what was …\n3001 - No discriminator was found on the account\n3017 - The account was duplicated for more than one …\n3014 - The given account is not the associated token …\n3005 - Not enough account keys given to the instruction\n3012 - The program expected this account to be already …\n3006 - The given account is not mutable\n3013 - The given account is not a program data account\n3010 - The given account did not sign\n3011 - The given account is not owned by the system program\n3007 - The given account is owned by a different program …\n3016 - The account reallocation exceeds the …\n3015 - The given public key does not match the required …\n2020 - A required account for the constraint is None\n2012 - An address constraint was violated\n2009 - An associated constraint was violated\n2010 - An associated init constraint was violated\n2023 - A mint token program constraint was violated\n2011 - A close constraint was violated\n2007 - An executable constraint was violated\n2001 - A has one constraint was violated\n2033 - A close authority extension constraint was violated\n2034 - A close authority extension authority constraint …\n2018 - A mint decimals constraint was violated\n2017 - A mint freeze authority constraint was violated\n2027 - A group member pointer extension constraint was …\n2028 - A group member pointer extension authority …\n2029 - A group member pointer extension member address …\nExtension constraints\n2025 - A group pointer extension authority constraint was …\n2026 - A group pointer extension group address constraint …\n2030 - A metadata pointer extension constraint was violated\n2031 - A metadata pointer extension authority constraint …\n2032 - A metadata pointer extension metadata address …\nThe mint mint is intentional -&gt; a mint authority for the …\n2035 - A permanent delegate extension constraint was …\n2036 - A permanent delegate extension authority constraint …\n2022 - A mint token program constraint was violated\n2037 - A transfer hook extension constraint was violated\n2038 - A transfer hook extension authority constraint was …\n2039 - A transfer hook extension transfer hook program id …\n2000 - A mut constraint was violated\n2004 - An owner constraint was violated\n2003 - A raw constraint was violated\n2005 - A rent exemption constraint was violated\n2006 - A seeds constraint was violated\n2002 - A signer constraint was violated\n2019 - A space constraint was violated\n2008 - Deprecated Error, feel free to replace with …\n2014 - A token mint constraint was violated\n2015 - A token owner constraint was violated\nThe token token is intentional -&gt; a token program for the …\n2013 - Expected zero account discriminant\n4100 - The declared program id does not match actual …\n5000 - The API being used is deprecated and should no …\nThe starting point for user defined error codes.\nError codes that can be returned by internal framework …\n1500 - The program was compiled without <code>event-cpi</code> feature\n1002 - IDL Account must be empty in order to resize\n1001 - Invalid program given to the IDL instruction\n1000 - The program was compiled without idl instructions\n102 - The program could not deserialize the given …\n103 - The program could not serialize the given instruction\n101 - Fallback functions are not supported\n100 - Instruction discriminator not provided\n4102 - Invalid numeric conversion error\n3009 - Program account is not executable\n3008 - Program ID was not as expected\n2501 - A require_eq expression was violated\n2505 - A require_gt expression was violated\n2506 - A require_gte expression was violated\n2502 - A require_keys_eq expression was violated\n2504 - A require_keys_neq expression was violated\n2503 - A require_neq expression was violated\n2500 - A require expression was violated\n4101 - You cannot/should not initialize the payer account …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the name of this [#enum_name].\nAccount information\nDescribes a single account read or written by a program …\nImplements an <code>Accounts</code> deserializer on the given struct. …\nImplements an <code>Accounts</code> deserializer on the given struct. …\nBorsh is the default serialization format for instructions …\nA data-structure that can be serialized into binary format …\nA Buffer account.\nA representation of network time.\nAllows on-chain programs to implement program-specific …\nImplements a <code>Space</code> trait on the given struct or enum.\nInstructions sysvar, dummy type.\nAn Program account.\nReasons the program may fail\nThe address of a Solana account.\nConfiguration of network rent.\nA bitvector indicating which slots are present in the past …\nA type that holds sysvar data.\nAccount is not initialized.\nUpgradeable loader account states\nExecutes the given access control method before running …\nAn attribute for a data structure representing a Solana …\nReturn a reference to the <code>Pubkey</code>’s byte array.\nThe percentage of collected rent that is burned.\nCalculate how much rent to burn from the collected rent.\nA marker attribute used to mark const values that should …\nCreate a valid program derived address without searching …\nThe data held in this account.  Modifiable by programs.\nDefines the program’s ID. This should be used at the …\nDeclare an external program based on its IDL.\nDeserializes this instance from a given slice of bytes. …\nRent due on account’s data length with balance.\nRent due for account that is known to be not exempt.\nLogs an event that can be subscribed to by clients. Uses …\nThe current <code>Epoch</code>.\nThe timestamp of the first <code>Slot</code> in this <code>Epoch</code>.\nReturns with the given error. Use this with a custom error …\nGenerates an <code>Error::AnchorError</code> that includes file and …\nGenerates an <code>Error::AnchorError</code> that includes file and …\nGenerates <code>Error</code> and <code>type Result&lt;T&gt; = Result&lt;T, Error&gt;</code> …\nThe event attribute allows a struct to be used with emit! …\nThe event attribute allows a struct to be used with emit! …\nThis account’s data contains a loaded program (and is …\nAmount of time (in years) a balance must include rent for …\nFind a valid program derived address and its corresponding …\nThe first epoch after the warmup period.\nThe first slot after the warmup period.\nCreates a <code>Rent</code> that charges no lamports.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes the sysvar from its <code>AccountInfo</code>.\nDecode a string into a Pubkey, usable in a const context\nLoad the sysvar directly from the runtime.\nget epoch for the given slot\nget epoch and offset into the epoch for the given slot\nget the epoch for which the given slot should save off …\nget the length of the given epoch (in slots)\nThis attribute is used to override the Anchor defaults of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether a given balance and data length would be exempt.\nWas the transaction signed by this account’s public key?\nTrue if an <code>Instruction</code> requires a <code>Transaction</code> signature …\nIs the account writable?\nTrue if the account data or metadata may be mutated during …\nPublic key of the account\nThe lamports in the account.  Modifiable by programs.\nRental rate in lamports/byte-year.\nThe future <code>Epoch</code> for which the leader schedule has most …\nA number of slots before beginning of an epoch to calculate\nLog a <code>Pubkey</code> from a program\nMinimum balance due for rent-exemption of a given account …\nPrint a message to the log.\nConstruct metadata for a writable account.\nConstruct metadata for a read-only account.\nunique Pubkey for tests and benchmarks.\nConvenience function for accessing the next item in an …\nReturn the account’s original data length when it was …\nProgram that owns this account\nThe <code>#[program]</code> attribute defines the module containing all …\nAn account’s public key.\nConvenience macro to define a static public key.\nRealloc the account’s data and optionally …\nThe epoch at which this account will next owe rent\nEnsures a condition is true, otherwise returns with the …\nEnsures two NON-PUBKEY values are equal.\nEnsures the first NON-PUBKEY value is greater than the …\nEnsures the first NON-PUBKEY value is greater than or equal\nEnsures two pubkeys values are equal.\nEnsures two pubkeys are not equal.\nEnsures two NON-PUBKEY values are not equal.\nThe size in bytes of the sysvar as serialized account data.\nSize of a serialized buffer account.\nSize of a buffer account’s serialized metadata.\nSize of a serialized program account.\nSize of a serialized programdata account.\nSize of a programdata account’s serialized metadata.\nSize of a serialized program account.\nThe current <code>Slot</code>.\nThe maximum number of slots in each epoch.\nCreates a <code>Source</code>\nSerializes the sysvar to <code>AccountInfo</code>.\nFind a valid program derived address and its corresponding …\nDeserialize this instance from a slice of bytes.\nSerialize this instance into a vector of bytes.\nThe approximate real world time of the current slot.\nWhether epochs start short and grow.\nCreates a <code>Rent</code> that is scaled based on the number of slots …\nA data structure that can be used as an internal field for …\nAuthority address\nAddress of the ProgramData account.\nSlot that the program was last modified.\nAddress of the Program’s upgrade authority.\nThe const program ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")