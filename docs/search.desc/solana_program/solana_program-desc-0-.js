searchState.loadedDescShard("solana_program", 0, "The base library for all Solana on-chain Rust programs.\nUtilities for the borsh serialization format.\nUtilities for the borsh serialization format, version 0.10.\nUtilities for the borsh serialization format, version 1.\nThe latest BPF loader native program.\nThe original and now deprecated Solana BPF loader.\nThe config native program.\nDefine the default global allocator.\nDefine the default global panic handler.\nDebug-formatting of account data.\nSame as <code>declare_id</code> except that it reports that this ID has …\nSame as <code>declare_sysvar_id</code> except that it reports that this …\nConvenience macro to declare a static public key and …\nDeclares an ID that implements <code>SysvarId</code>.\nThe ed25519 native program.\nDeclare the program entrypoint and set up global handlers.\nThe Rust-based BPF program entrypoint supported by the …\nDeclare the program entrypoint.\nDeclare the program entrypoint and set up global handlers.\nAPI for retrieving epoch stake information.\nHashing with the SHA-256 hash function, and a general <code>Hash</code> …\nImplements the <code>Sysvar::get</code> method for both SBF and host …\nRe-exports the <code>LamportsError</code> type for backwards …\nLogging utilities for Rust-based Solana programs.\nPrint a message to the log.\nWrappers around <code>solana-cpi</code> with support for overwriting …\nImplementations of syscalls used when <code>solana-program</code> is …\nConvenience macro to define a static public key.\nA vector of Solana SDK IDs.\nThe secp256k1 native program.\nDeclarations of Solana program syscalls.\nThe system native program.\nConvenience macro for doing integer division where the …\nThe definition of address lookup table accounts.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAttempted to lookup addresses from an invalid account\nAttempted to lookup addresses from an account owned by the …\nAddress lookup contains an invalid index\nAttempted to lookup addresses from a table that does not …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nClose an address lookup table account\nCreate an address lookup table\nDeactivate an address lookup table, making it unusable and …\nExtend an address lookup table with new addresses. Funding …\nPermanently freeze an address lookup table, making it …\nReturns an instruction that closes an address lookup table …\nConstructs an instruction to create a table account and …\nConstructs an instruction to create a table account and …\nConstructs an instruction that deactivates an address …\nDerives the address of an address table account from a …\nConstructs an instruction which extends an address lookup …\nConstructs an instruction that freezes an address lookup …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAddress tables are always initialized at program-derived …\nA recent slot must be used in the derivation path for each …\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.\nThe maximum number of addresses that a lookup table can …\nThe serialized size of lookup table metadata\nInitialized <code>LookupTable</code> account.\nAddress lookup table metadata\nActivation status of a lookup table\nProgram account states\nAccount is not initialized.\nAuthority address which must sign for each modification.\nLookup tables cannot be closed until the deactivation slot …\nEfficiently deserialize an address table without allocating\nThe lookup table may be in a deactivating state until the `…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the length of addresses that are active for lookups\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the table is considered active for address …\nThe slot that the table was last extended. Address tables …\nThe start index where the table was last extended from …\nLookup addresses for provided table indexes. Since lookups …\nLookup addresses for provided table indexes. Since lookups …\nSerialize an address table’s updated meta data and zero …\nSerialize an address table including its addresses\nReturn the current status of the lookup table\nGet the packed length for the serialized form of this …\nGet the worst-case packed length for the given BorshSchema\nDeserializes without checking that the entire slice has …\nGet the packed length for the serialized form of this …\nGet the worst-case packed length for the given BorshSchema\nDeserializes without checking that the entire slice has …\nGet the packed length for the serialized form of this …\nGet the worst-case packed length for the given BorshSchema\nDeserializes without checking that the entire slice has …\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.\nA Buffer account.\nThe const program ID.\nAn Program account.\nAccount is not initialized.\nUpgradeable loader account states\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the instructions required to close a buffer account\nReturns the instructions required to close program, …\nReturns the instructions required to initialize a Buffer …\nReturns the instructions required to deploy a program with …\nReturns the instruction required to extend the size of a …\nReturns the argument unchanged.\nReturns the program data address for a program ID\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nReturns the instructions required to set a buffers’s …\nReturns the instructions required to set a buffers’s …\nReturns the instructions required to set a program’s …\nReturns the instructions required to set a program’s …\nSize of a serialized buffer account.\nSize of a buffer account’s serialized metadata.\nSize of a serialized program account.\nSize of a serialized programdata account.\nSize of a programdata account’s serialized metadata.\nSize of a serialized program account.\nReturns the instructions required to upgrade a program.\nReturns the instructions required to write a chunk of …\nAuthority address\nAddress of the ProgramData account.\nSlot that the program was last modified.\nAddress of the Program’s upgrade authority.\nReturn the remaining compute units the program may consume\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.\nFormat data as hex.\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.\nContains the error value\nContains the success value\nUser implemented function to process an instruction\nPrograms indicate success with a return value of 0\nDeserialize the input arguments\nThe default number of slots before an epoch starts to …\nThe number of slots per epoch after initial network warmup.\nThe unit of time a given leader schedule is honored.\nThe maximum number of slots before an epoch starts to …\nThe minimum number of slots per epoch during the warmup …\nThe unit of time given to a leader for encoding a block.\nThe first epoch after the warmup period.\nThe first slot after the warmup period.\nReturns the argument unchanged.\nget epoch for the given slot\nget epoch and offset into the epoch for the given slot\nget the epoch for which the given slot should save off …\nget the length of the given epoch (in slots)\nCalls <code>U::from(self)</code>.\nA number of slots before beginning of an epoch to calculate\nThe maximum number of slots in each epoch.\nWhether epochs start short and grow.\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.\nGet the current epoch stake for a given vote address.\nGet the current epoch’s total stake.\nSize of a hash in bytes.\nA hash; the 32-byte output of a hashing algorithm.\nReturn the hash of the given hash extended with the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a Sha256 hash for the given data.\nReturn a Sha256 hash for the given data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nunique Hash for tests and benchmarks.\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.\nAn initialize instruction was sent to an account that has …\nFailed to borrow a reference to account data, already …\nAccount data has an outstanding reference after a program…\nProgram other than the account’s owner changed the size …\nAn account’s data was too small\nDescribes a single account read or written by a program …\nThe instruction expected an executable account\nAn account does not have enough lamports to be rent-exempt\nProgram arithmetic overflowed\nFailed to serialize or deserialize account data\nBuiltin programs must consume compute units\nCross-program invocation call depth too deep\nA compact encoding of an instruction.\nComputational budget exceeded\nAllows on-chain programs to implement program-specific …\nAn account was referenced more than once in a single …\nThe same account was multiply passed to an on-chain program…\nExecutable accounts must be rent exempt\nExecutable account’s data was modified\nExecutable account’s lamports modified\nExecutable bit on account changed, but shouldn’t have\nProgram modified the data of an account that doesn’t …\nProgram spent the lamports of an account that doesn’t …\nDeprecated! Use CustomError instead! The program …\nIllegal account owner\nAccount is immutable\nIncorrect authority provided\nThe account did not have the expected program id\nA directive for a single invocation of a Solana program.\nReasons the runtime might have rejected an instruction.\nAn account’s balance was too small to complete the …\nAn account’s data contents was invalid\nInvalid account owner\nThe arguments provided to a program were invalid\nThe return value from the program was invalid.  Valid …\nAn instruction’s data contents were invalid\nFailed to reallocate account data of this length\nProvided seeds do not result in a valid address\nAccounts data allocations exceeded the maximum allowed per …\nMax accounts exceeded\nMax instruction trace length exceeded\nLength of the seed is too long for address generation\nAn account required by the instruction is missing\nA signature was required but not found\nProgram illegally modified an account’s program id\nThe instruction expected additional account keys\nCross-program invocation with unauthorized signer or …\nUse to query and convey information about the sibling …\nFailed to create program execution environment\nProgram failed to compile\nProgram failed to complete\nRead-only account’s data was modified\nRead-only account’s lamports modified\nCross-program invocation reentrancy not allowed for this …\nRent_epoch account changed, but shouldn’t have\nProgram’s instruction lamport balance does not equal the …\nAn attempt to operate on an account that hasn’t been …\nUnsupported program id\nUnsupported sysvar\nMetadata describing accounts that should be passed to the …\nOrdered indices into the transaction keys array indicating …\nNumber of AccountMeta structures\nOpaque data passed to the program for its own …\nThe program input data.\nLength of the instruction data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a sibling instruction from the processed sibling …\nGet the current stack height, transaction-level …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if an <code>Instruction</code> requires a <code>Transaction</code> signature …\nTrue if the account data or metadata may be mutated during …\nConstruct metadata for a writable account.\nConstruct metadata for a read-only account.\nCreate a new instruction from a value, encoded with <code>bincode</code>…\nCreate a new instruction from a value, encoded with <code>borsh</code>.\nCreate a new instruction from a byte slice.\nPubkey of the program that executes this instruction.\nIndex into the transaction keys array indicating the …\nAn account’s public key.\narithmetic overflowed\narithmetic underflowed\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCloses an account owned by the upgradeable loader of all …\nDeploy an executable program.\nExtend a program’s ProgramData account by the specified …\nInitialize a Buffer account.\nMigrate the program to loader-v4.\nSet a new authority that is allowed to write the buffer or …\nSet a new authority that is allowed to write the buffer or …\nUpgrade a program.\nWrite program data into a Buffer account.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNumber of bytes to extend the program data.\nSerialized program data\nMaximum length that the program can be upgraded to.\nOffset at which to write the given bytes.\nCooldown before a program can be un-/redeployed again\nProgram is ready to be executed\nSame as <code>Deployed</code>, but can not be retracted anymore\nThe const program ID.\nLoaderV4 account states\nProgram is in maintenance\nAddress of signer which can send program management …\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the instructions required to initialize a …\nReturns the instructions required to deploy a program.\nReturns the instructions required to deploy a program …\nReturns the instructions required to finalize program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSize of a serialized program account.\nReturns the instructions required to retract a program.\nReturns the instructions required to set the length of the …\nSlot in which the program was last deployed, retracted or …\nDeployment status.\nReturns the instructions required to transfer authority …\nReturns the instructions required to set the length of the …\nReturns the instructions required to set the length of the …\nReturns the instructions required to write a chunk of …\nCopy ELF data into an undeployed program account.\nVerify the data of a program account to be a valid ELF.\nFinalizes the program account, rendering it immutable.\nUndo the deployment of a program account.\nChanges the size of an undeployed program account.\nTransfers the authority over a program account.\nWrite ELF data into an undeployed program account.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialized program data\nOffset at which to write.\nAmount of bytes to copy.\nThe new size after the operation.\nOffset at which to write the given bytes.\nOffset at which to read.\nPrint a message to the log.\nPrint a string to the log.\nPrint 64-bit values represented as hexadecimal to the log.\nPrint the remaining compute units available to the program.\nPrint some slices as base64.\nPrint the hexadecimal representation of the program’s …\nPrint the hexadecimal representation of a slice.\nThe state of a durable transaction nonce account.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate new durable transaction nonce state.\nGet the serialized size of the nonce state.\nCurrent variants have durable nonce and blockhash domains …\nInitialized data of a durable transaction nonce account.\nThe state of a durable transaction nonce account.\nHash value used as recent_blockhash field in Transactions.\nAddress of the account that signs transactions using the …\nUpdates the authority pubkey on the nonce account.\nHash value used as recent_blockhash field in Transactions. …\nDurable nonce value derived from a valid previous …\nThe fee calculator associated with the blockhash.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the cost per signature for the next transaction to use …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new durable transaction nonce data.\nUpgrades legacy nonces out of chain blockhash domains.\nChecks if the recent_blockhash field in Transaction …\nMaximum size that can be set using <code>set_return_data</code>.\nLike <code>solana_cpi::get_return_data</code>, but with support for …\nLike <code>solana_cpi::invoke</code>, but with support for overwriting …\nLike <code>solana_cpi::invoke_signed</code>, but with support for …\nLike <code>solana_cpi::invoke_signed_unchecked</code>, but with support …\nLike <code>solana_cpi::invoke_unchecked</code>, but with support for …\nLike <code>solana_cpi::set_return_data</code>, but with support for …\nAllows on-chain programs to implement program-specific …\nReasons the program may fail\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nSafety\nSafety\nDeserialize with a limit based the maximum amount of data …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.\nThe unit of time given to a leader for encoding a block.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.\nThe unit of time given to a leader for encoding a block.\nA bitvector indicating which slots are present in the past …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.\nThe minimum number of epochs before stake account that is …\nConfig for staking.\nUtility functions\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\npercentage of stake lost when slash, expressed as a …\nhow much stake we can activate/deactivate per-epoch as a …\nStake already deactivated.\nAuthorize a key to manage stake or withdrawal\nAuthorize a key to manage stake or withdrawal\nAuthorize a key to manage stake or withdrawal with a …\nAuthorize a key to manage stake or withdrawal with a …\nCustodian address not present.\nCustodian signature not present.\nDeactivates the stake in the account\nDeactivate stake delegated to a vote account that has been …\nDelegate a stake to a particular vote account\nStake action is not permitted while the epoch rewards …\nGet the minimum stake delegation, in lamports\nInitialize a stake with lockup and authorization …\nInitialize a stake with authorization information\nDelegation amount is less than the minimum.\nInsufficient voting activity in the reference vote account.\nSplit amount is more than is staked.\nLockup has not yet expired.\nMerge two stake accounts.\nStake account merge failed due to different authority, …\nStake account with transient stake cannot be merged.\nStake account has not been delinquent for the minimum …\nMove unstaked lamports between accounts with the same …\nMove stake between accounts with the same authorities and …\nNot enough credits to redeem.\nRedelegate activated stake to another vote account.\nStake redelegation to the same vote account is not …\nStake account with transient or inactive stake cannot be …\nRedelegated stake must be fully activated before …\nSet stake lockup\nSet stake lockup\nSplit <code>u64</code> tokens and stake off a stake account into …\nReasons the Stake might have had an error.\nOne re-delegation permitted per epoch.\nStake account is not delegated to the provided vote …\nWithdraw unstaked lamports from the stake account\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.\nStake must be fully activated before deactivation is …\nAdditional flags for stake state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nepoch at which this stake was activated, <code>std::u64::MAX</code> if …\ncredits observed is credits from vote account state when …\ncustodian signature on a transaction exempts the operation …\nepoch the stake was deactivated, <code>std::u64::MAX</code> if not …\nepoch height at which this stake will allow withdrawal, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe fixed number of bytes used to serialize each stake …\nThe fixed number of bytes used to serialize each stake …\nactivated stake amount, set at delegate() time\nUnixTimestamp at which this stake will allow withdrawal, …\nto whom the stake is delegated\nhow much stake we can activate per-epoch as a fraction of …\nCheck if the provided <code>epoch_credits</code> demonstrate active …\nCheck if the provided <code>epoch_credits</code> demonstrate …\nHelper function for programs to call <code>GetMinimumDelegation</code> …\nThe unit of time a given leader schedule is honored.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of account info structs that can be used in …\nMaximum CPI instruction accounts. 255 was chosen to ensure …\nMaximum CPI instruction data size. 10 KiB was chosen to …\nAn account with the same address already exists.\nProvided address does not match addressed derived from …\nConsumes a stored nonce, replacing it with a successor\nAllocate space in a (possibly new) account without funding\nAllocate space for and assign an account at an address …\nAssign account to a program\nAssign account to a program based on a seed\nChange the entity authorized to execute nonce instructions …\nCreate a new account\nCreate a new account at an address derived from a base …\nDrive state of Uninitialized nonce account to Initialized, …\nCannot allocate account data of this length.\nCannot assign account to this program id.\nMaximum permitted size of new allocations per transaction, …\nMaximum permitted size of account data (10 MiB).\nLength of requested seed is too long.\nStored nonce is still in recent_blockhashes.\nAdvancing stored nonce requires a populated …\nSpecified nonce does not match stored nonce.\nAccount does not have enough SOL to perform the operation.\nAn instruction to the system program.\nTransfer lamports\nTransfer lamports from a derived address\nOne-time idempotent upgrade of legacy nonce versions in …\nWithdraw funds from a nonce account\nAdvance the value of a durable transaction nonce.\nAllocate space for an account.\nAssign ownership of an account from the system program.\nChange the authority of a durable transaction nonce …\nCreate an account.\nCreate an account containing a durable transaction nonce.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransfer lamports from an account owned by the system …\nTransfer lamports from an account owned by the system …\nOne-time idempotent upgrade of legacy nonce versions in …\nWithdraw lamports from a durable transaction nonce account.\nBase public key\nBase public key\nBase public key\nOwner to use to derive the funding account address\nSeed to use to derive the funding account address\nNumber of lamports to transfer to the new account\nNumber of lamports to transfer to the new account\nAmount to transfer\nAddress of program that will own the new account\nOwner program account\nOwner program account address\nOwner program account\nOwner program account\nString of ASCII chars, no longer than <code>Pubkey::MAX_SEED_LEN</code>\nString of ASCII chars, no longer than <code>pubkey::MAX_SEED_LEN</code>\nString of ASCII chars, no longer than <code>pubkey::MAX_SEED_LEN</code>\nNumber of bytes of memory to allocate\nNumber of bytes of memory to allocate\nNumber of bytes of memory to allocate\nNumber of bytes of memory to allocate\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the program ID.\nThe const program ID.\nA type that holds sysvar data.\nA type that holds sysvar data and has an associated sysvar …\nReturns <code>true</code> if given pubkey is the program ID.\nReturns <code>true</code> if the given pubkey is the program ID.\nInformation about the network’s clock, ticks, slots, etc.\nSame as <code>declare_sysvar_id</code> except that it reports that this …\nDeclares an ID that implements <code>SysvarId</code>.\nEpoch rewards for current epoch\nInformation about epoch duration.\nCurrent cluster fees.\nReturns the argument unchanged.\nDeserializes the sysvar from its <code>AccountInfo</code>.\nLoad the sysvar directly from the runtime.\nReturns the program ID.\nThe <code>Pubkey</code> of the sysvar.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> of the given <code>Pubkey</code> is a sysvar account.\nInformation about the last restart slot (hard fork).\nInformation about recent blocks and their fee calculators.\nConfiguration for network rent.\nThis sysvar is deprecated and unused.\nThe size in bytes of the sysvar as serialized account data.\nThe most recent hashes of a slot’s parent banks.\nA bitvector of slots present over the last epoch.\nHistory of stake activations and de-activations.\nSerializes the sysvar to <code>AccountInfo</code>.\nA representation of network time.\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nThe current <code>Epoch</code>.\nThe timestamp of the first <code>Slot</code> in this <code>Epoch</code>.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nThe future <code>Epoch</code> for which the leader schedule has most …\nThe current <code>Slot</code>.\nThe approximate real world time of the current slot.\nThe const program ID.\nWhether the rewards period (including calculation and …\nReturns <code>true</code> if given pubkey is the program ID.\nThe rewards currently distributed for the current epoch, …\nThe starting block height of the rewards distribution in …\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nNumber of partitions in the rewards distribution in the …\nThe blockhash of the parent block of the first block in …\nThe total rewards points calculated for the current epoch, …\nThe total rewards calculated for the current epoch. This …\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nThe first epoch after the warmup period.\nThe first slot after the warmup period.\nReturns the program ID.\nA number of slots before beginning of an epoch to calculate\nThe maximum number of slots in each epoch.\nWhether epochs start short and grow.\nTransaction fees.\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nBorrowed version of <code>AccountMeta</code>.\nBorrowed version of <code>Instruction</code>.\nThe const program ID.\nInstructions sysvar, dummy type.\nReturns <code>true</code> if given pubkey is the program ID.\nConstruct the account data for the instructions sysvar.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>Instruction</code> relative to the current <code>Instruction</code>…\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad the current <code>Instruction</code>’s index in the currently …\nLoad an <code>Instruction</code> in the currently executing <code>Transaction</code> …\nStore the current <code>Instruction</code>’s index in the …\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nThe last restart <code>Slot</code>.\nThe const program ID.\nContains recent block hashes and fee calculators.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe const program ID.\nConfiguration of network rent.\nThe percentage of collected rent that is burned.\nCalculate how much rent to burn from the collected rent.\nReturns <code>true</code> if given pubkey is the program ID.\nRent due on account’s data length with balance.\nRent due for account that is known to be not exempt.\nAmount of time (in years) a balance must include rent for …\nCreates a <code>Rent</code> that charges no lamports.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nWhether a given balance and data length would be exempt.\nRental rate in lamports/byte-year.\nMinimum balance due for rent-exemption of a given account …\nCreates a <code>Rent</code> that is scaled based on the number of slots …\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nThe const program ID.\nA bytemuck-compatible (plain old data) version of <code>SlotHash</code>.\nAPI for querying of the <code>SlotHashes</code> sysvar by on-chain …\nAPI for querying the <code>SlotHashes</code> sysvar.\nA type that holds sysvar data and has an associated sysvar …\nReturn the <code>SlotHashes</code> sysvar data as a slice of <code>PodSlotHash</code>…\nReturns <code>true</code> if given pubkey is the program ID.\nReturns <code>true</code> if the given pubkey is the program ID.\nFetch all of the raw sysvar data using the <code>sol_get_sysvar</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a value from the sysvar entries by its key. Returns …\nGiven a slot, get its corresponding hash in the <code>SlotHashes</code> …\nReturns the program ID.\nThe <code>Pubkey</code> of the sysvar.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the position of an entry in the sysvar by its key. …\nGiven a slot, get its position in the <code>SlotHashes</code> sysvar …\nAccount information\nAllows on-chain programs to implement program-specific …\nThe const program ID.\nReasons the program may fail\nA bitvector indicating which slots are present in the past …\nReturns <code>true</code> if given pubkey is the program ID.\nThe data held in this account.  Modifiable by programs.\nThis account’s data contains a loaded program (and is …\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.\nWas the transaction signed by this account’s public key?\nIs the account writable?\nPublic key of the account\nThe lamports in the account.  Modifiable by programs.\nReturn the account’s original data length when it was …\nProgram that owns this account\nRealloc the account’s data and optionally …\nThe epoch at which this account will next owe rent\nThe const program ID.\nReturns <code>true</code> if given pubkey is the program ID.\nReturns the argument unchanged.\nReturns the program ID.\nCalls <code>U::from(self)</code>.")